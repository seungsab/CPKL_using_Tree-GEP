function gplabgui
%GPLAB    GUI
%   Graphical User Interface for GPLAB Toolbox  
%
%   Created (2014) by Nuno Tenazinha
%   This file is part of the GPLAB Toolbox

% 0. SET THE GUI DIMENSIONS
    guisize = [800 400];

% 1. CENTER THE GUI ON SCREEN

    screensize = get(0,'ScreenSize');
    xpos = ceil((screensize(3)-guisize(1))/2);
    ypos = ceil((screensize(4)-guisize(2))/2);
    figure_handle = figure('MenuBar','none',...
               'Toolbar','none',...
               'Position', [xpos ypos*1.6 guisize(1) guisize(2)],...
               'Name','GPLAB Graphical User Interface',...
               'NumberTitle','off',...
               'Visible','off');
    obj_handle = guihandles(figure_handle); 

% 2. INITIALIZE GUI OBJECT AND ALGORITHM PARAMETERS
    obj_handle.settings = resetparams;
    obj_handle.defaultpath = [];
    obj_handle.fnList = { 'ceil' 1; 'floor' 1; 'times' 2; 'mydivide' 2; 'plus' 2; 'minus' 2; 'uminus' 1; 'mysqrt' 1; 'mylog2' 1; 'mylog10' 1; 'mylog' 1; 'mypower' 2;
               'sin' 1; 'cos' 1; 'min' 2; 'max' 2; 'abs' 1; 'myif' 3; 'eq' 2; 'ne' 2; 'lt' 2; 'gt' 2; 'le' 2; 'ge' 2; 'and' 2; 'or' 2; 'not' 1; 'xor' 2};
    obj_handle.fnListAnt = { 'antif' 2; 'antprogn2' 2; 'antprogn3' 3};
    obj_handle.importMethodList = {'xy2inout','anttrail'};              
    obj_handle.actFnList = obj_handle.settings.functions; 
    obj_handle.terminalsAnts = {'antright','antleft','antmove'};
    obj_handle.runtimeplots = {'plotfitness','plotdiversity','plotcomplexity','plotoperators'};
    %'Crossover', 'Homologous Crossover', 'Mutation', 'Shrink Mutation',
    %'Swap Mutation', 'Point Mutation: 1-Point and N-Point', 'Brood'
    obj_handle.operatorslist = {'crossover',2,2,'homocross',2,1,'mutation',1,1,...
                                'shrinkmutation',1,1,'swapmutation',1,1,'pointmutation',1,1,'brood',2,1};
    obj_handle.samplingMethods = {'roulette','sus','tournament','lexictour','doubletour'};
    obj_handle.expectedChildren = {'absolute','rank85','rank89'};
    obj_handle.fitnessMeasureFunctions = {'regfitness'};
    obj_handle.fitnessMeasureFunctionsAnts = {'antfitness','antfitness_lib'};
    obj_handle.adjustedFitnessMeasureFunctions = {'------- Select function -------','linearppp'};
    obj_handle.measureDiversityMethods = {'------- Select function -------','uniquegen','hamming'};
    obj_handle.elitismList = {'replace','keepbest','halfelitism','totalelitism'};
    obj_handle.survivalFnList = {'fixedpopsize','resources','pivotfixe'};
    obj_handle.resourcesPopSizeList = {'steady','low','free'};
    obj_handle.resourcesFitnessList = {'normal_accept','light_accept'};
    obj_handle.ajoutList = {'Equal to initial pop. size','A proportion of the initial pop. size.'};
    obj_handle.savetofilelist = {'never','firstlast','every10','every100','always'};
    obj_handle.outputlist = {'silent','normal','verbose'};
    obj_handle.operatoreqlist = {'DynOpEq','MutOpEq'};
    obj_handle.operatoreqTargetlist = {'automatic','uniform'};
    obj_handle.runnumber = [1];
    obj_handle.loadedRun = [];
    obj_handle.loadedRunCheck = 0;
    obj_handle.tempMessages = {};
    obj_handle.messageCounter = 1;
    obj_handle.Generation = 0;
    obj_handle.finishedrun = 0;
    obj_handle.filesmessage = '';
    obj_handle.gnumber = [];
    obj_handle.popsize = [];
           
% 3. CREATE THE GUI MAIN CONTROL PANEL  

   % 3.1 LOGO AND INFO ON TOP
   
   obj_handle.logoPanel = uipanel('Title',[],'FontSize',12,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.7 .96 .25],...
             'BorderWidth',0);  
         
    obj_handle.logoBox = uicontrol('Parent',obj_handle.logoPanel,...
              'style', 'text',...
              'units','normalized',...
              'position', [0 0.50 0.6 0.55], ...
              'BackgroundColor',[0.8 0.8 0.8],...
              'HorizontalAlignment','left',...
              'FontSize', 40,...
              'FontAngle', 'italic',...
              'ForegroundColor', [0.45 0.45 0.45],...
              'string', 'GPLAB');
          
    obj_handle.sloganBox = uicontrol('Parent',obj_handle.logoPanel,...
              'style', 'text',...
              'units','normalized',...
              'position', [0 0.15 0.8 0.35], ...
              'HorizontalAlignment','left',...              
              'BackgroundColor',[0.8 0.8 0.8],...
              'FontSize', 20,...
              'FontAngle', 'italic',...
              'ForegroundColor', [0.6 0.6 0.6],...
              'string', 'A Genetic Programming Toolbox for MATLAB');  
          
    obj_handle.versionControl = uicontrol('Parent',obj_handle.logoPanel,...
              'style', 'text',...
              'units','normalized',...              
              'position', [0.87 0.15 0.15 0.26], ...
              'BackgroundColor',[0.8 0.8 0.8],...
              'HorizontalAlignment','left',... 
              'FontSize', 14,...
              'FontAngle', 'italic',...
              'ForegroundColor', [0.6 0.6 0.6],...
              'string', 'Version 4.0');           
                
    % 3.2 LOAD DATA BLOCK    
    obj_handle.UploadData = uipanel('Title','Load Data','FontSize',12,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.3 .30 .35]);      
         
    obj_handle.textImportMethod = uicontrol('Parent',obj_handle.UploadData,...
              'style', 'text',...
              'units','normalized',...
              'position', [0.015 0.8 0.50 0.15],...
              'string','Select type of problem',...
              'BackgroundColor',[0.8 0.8 0.8]); 
          
    obj_handle.importMethod = uicontrol('Parent',obj_handle.UploadData,...
             'units','normalized',... 
             'Style','Popup',...
             'String',{'Regression/Boolean','Artificial Ant'},...
             'Position',[0.55 0.85 0.40 0.15],...
             'Value', 1);           
                  
    obj_handle.buttonSelectDataX = uicontrol('Parent',obj_handle.UploadData,...
              'units','normalized',...
              'style', 'pushbutton',...
              'position', [0.02 0.50 0.45 0.25], ...
              'string', 'Select X data file');          
          
    obj_handle.buttonSelectDataY = uicontrol('Parent',obj_handle.UploadData,...
              'style', 'pushbutton',...
              'units','normalized',...              
              'position', [0.52 0.50 0.45 0.25], ...
              'string', 'Select Y data file'); 
          
    obj_handle.testDataQuestion = uicontrol('Parent',obj_handle.UploadData,...
              'style', 'text',...
              'units','normalized',...              
              'position', [0.05 0.30 0.70 0.15],...
              'string','Check this to load test data',...
              'BackgroundColor',[0.8 0.8 0.8]);
         
    obj_handle.buttonSelectTestDataCheck = uicontrol('Parent',obj_handle.UploadData,...
             'style', 'checkbox',...
              'units','normalized',...                
              'position', [0.72 0.315 0.15 0.15],...
              'BackgroundColor',[0.8 0.8 0.8],...
              'value', 0); 
          
    obj_handle.buttonSelectTestDataX = uicontrol('Parent',obj_handle.UploadData,...
             'style', 'pushbutton',...
              'units','normalized',...              
              'position', [0.02 0.05 0.45 0.25], ...
              'string', 'Select X test file',...
              'visible','off');    
              
    obj_handle.buttonSelectTestDataY = uicontrol('Parent',obj_handle.UploadData,...
              'style', 'pushbutton',...
              'units','normalized',...               
              'position', [0.52 0.05 0.45 0.25], ...
              'string', 'Select Y test file',...
              'visible','off');  
          
    obj_handle.LoadedRunData = uipanel('Title','Current Run Data','FontSize',12,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.3 .30 .35],...
             'Visible','Off');           
          

    % 3.3 ALGORITHM BASIC SETTINGS BLOCK
    obj_handle.basicSettings = uipanel('Title','Basic Settings','FontSize',12,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.33 0.3 .25 .35]); 

         
    obj_handle.GenerationNumberText = uicontrol('Parent',obj_handle.basicSettings,...
             'style','Text',...
             'string','Number of Generations',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[8 65 120 30]); 
         
    obj_handle.NumberGenerations = uicontrol('Parent',obj_handle.basicSettings,...
             'Style','edit',...
             'Position',[140 78 40 20]);
            
    obj_handle.PopulationSizeText = uicontrol('Parent',obj_handle.basicSettings,...
             'style','Text',...
             'string','Population Size',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[4 15 90 30]); 
         
    obj_handle.PopulationSize = uicontrol('Parent',obj_handle.basicSettings,...
                'Style','edit',...
                'Position',[140 28 40 20]); 
            
    obj_handle.GenerationNumberContinueText = uicontrol('Parent',obj_handle.basicSettings,...
             'style','Text',...
             'units','normalized',...  
             'string','Number of Generations for continuing a previous run',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.55 0.90 0.25],...
             'Visible','Off'); 
         
    obj_handle.NumberGenerationsContinue = uicontrol('Parent',obj_handle.basicSettings,...
             'Style','edit',...
             'units','normalized',...  
             'Position',[0.25 0.25 0.5 0.2],...
             'Visible','Off');
            
    % 3.4 RUNTIME OUTPUT BLOCK
    obj_handle.RuntimeGraphicOutput = uipanel('Title','Runtime Graphic Output','FontSize',12,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.59 0.3 .25 .35]);  

    obj_handle.SelectRGOText = uicontrol('Parent',obj_handle.RuntimeGraphicOutput,...
             'Style','Text',...
             'string', 'Select runtime plots to generate',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[2 15 180 100]);  
         
    obj_handle.SelectRGO = uicontrol('Parent',obj_handle.RuntimeGraphicOutput,...
             'Style','listbox',...
             'string', {'Fitness','<html><body style="color:#9b9b9b;">Diversity','Complexity','Operators'},...
             'Position',[10 20 180 60],...
             'Max',4,'Min',0,...
             'Value', []);   
         
    % 3.5 LOAD RUN BUTTON
    obj_handle.loadRun = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.85 0.52 0.13 0.1], ...
              'string', 'Load Run'); 
          
    obj_handle.loadedFileInfo = uicontrol('Parent',obj_handle.LoadedRunData,...
             'Style','text',...
             'FontSize', 9,...
             'units','normalized',...
             'HorizontalAlignment','center',...   
             'BackgroundColor',[0.8 0.8 0.8],...
             'String', 'There are no files loaded.',...
             'Position',[0.02 0.4 0.96 0.30],...
             'visible','off');            
          
    % 3.6 CLEAR RUN BUTTON
    obj_handle.clearRun = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.85 0.52 0.13 0.1], ...
              'string', 'Clear Run',...
              'Visible','off');     
          
    % 3.7 SAVE RUN BUTTON
    obj_handle.saveRun = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.85 0.10 0.13 0.1], ...
              'string', 'Save Run',...
              'Visible','off');            
         
    % 3.8 ADVANCED SETTINGS BUTTON
    obj_handle.advancedSettings = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.85 0.41 0.13 0.1], ...
              'string', 'Settings');    
         
    % 3.9 EXECUTE ALGORITHM BUTTON
    obj_handle.buttonRun = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.85 0.30 0.13 0.1], ...
              'string', 'Run');
          
    % 3.10 CONTINUE ALGORITHM BUTTON
    obj_handle.buttonContinueRun = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.85 0.30 0.13 0.1], ...
              'string', 'Continue Run',...
              'visible','off');  
          
    % 3.10 PAUSE ALGORITHM BUTTON
    obj_handle.buttonPauseRun = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.85 0.30 0.13 0.1], ...
              'string', 'Running...',...
              'visible','off');            
          
    % 3.11 ALGORITHM RUN STATUS BLOCK
       
    obj_handle.statusMessage = uicontrol('Style','text',...
             'FontSize',10,...
             'units','normalized',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'String', 'STATUS:',...
             'Position',[0.01 0.15 0.1 0.1],...
             'visible','off');            
          
 % 4. CREATE THE ADVANCED SETTINGS PANEL  
    
    % 4.1 LOGO AND TEXT ON TOP
    
   obj_handle.ADLogoPanel = uipanel('Title',[],'FontSize',12,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.8 .96 .15],...
             'BorderWidth',0);
         
    obj_handle.smalllogoBox = uicontrol('Parent',obj_handle.ADLogoPanel,...
              'style', 'text',...
              'units','normalized',...
              'HorizontalAlignment','left',...
              'position', [0 0.55 0.8 0.68], ...
              'BackgroundColor',[0.8 0.8 0.8],...
              'FontSize', 30,...
              'FontAngle', 'italic',...
              'ForegroundColor', [0.45 0.45 0.45],...
              'string', 'GPLab',...
              'visible','off');
          
    obj_handle.settingsText = uicontrol('Parent',obj_handle.ADLogoPanel,...
              'style', 'text',...
              'units','normalized',...
              'HorizontalAlignment','left',...
              'position', [0.2 0.25 0.5 0.68], ...
              'BackgroundColor',[0.8 0.8 0.8],...
              'FontSize', 15,...
              'FontAngle', 'italic',...
              'ForegroundColor', [0.6 0.6 0.6],...
              'string', 'Advanced Settings',...
              'visible','off'); 
    
    % 4.2 PARAMETER SETTINGS GROUP (BUTTONS) & PANEL
    obj_handle.parameterGroups = uipanel('Title','Parameter Groups','FontSize',12,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.17 .25 0.65],...
             'FontSize', 10,...
             'visible','off');  
         
    obj_handle.settingsPanel = uipanel('Title','','FontSize',12,...        
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.3 0.17 0.68 0.65],...
             'FontSize', 10,...
             'visible','off');   
         
    % 4.2.1 Tree Settings
    obj_handle.buttonTreeSettings = uicontrol('Parent',obj_handle.parameterGroups,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.05 0.85 0.9 0.1], ...
              'string', 'Tree Settings');
    
    obj_handle.TreePanel = uipanel('Parent',obj_handle.settingsPanel,...
             'Title','TREE SETTINGS','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0 0 0.98 0.98],...
             'FontSize', 10,...
             'visible','on'); 
         
    % Initialization Subpanel
    obj_handle.TreePanelInit = uipanel('Parent',obj_handle.TreePanel,...
             'Title','Initialization','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.35 0.45 0.60],...
             'FontSize', 10,...
             'visible','on');          
         
    obj_handle.DepthNodesText = uicontrol('Parent',obj_handle.TreePanelInit,...
             'units','normalized',...
             'style','Text',...
             'string','Tree Growth Restriction',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.025 0.75 0.55 0.15]);   
         
    obj_handle.DepthNodes = uicontrol('Parent',obj_handle.TreePanelInit,...
             'units','normalized',...        
             'style','Popup',...
             'string',{'Depth','Size'},...
             'Position',[0.65 0.78 0.3 0.15],...
             'value', 1);   
         
    obj_handle.InitMaxDepthSizeText = uicontrol('Parent',obj_handle.TreePanelInit,...
             'units','normalized',... 
             'style','Text',...
             'string','Initial Maximum Depth/Size ',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.42 0.55 0.15]); 
         
    obj_handle.InitMaxDepthSize = uicontrol('Parent',obj_handle.TreePanelInit,...
             'units','normalized',... 
             'Style','edit',...
             'String', 6,...
             'Position',[0.65 0.39 0.30 0.20]);    
         
    obj_handle.GenerativeMethodText = uicontrol('Parent',obj_handle.TreePanelInit,...
             'units','normalized',... 
             'style','Text',...
             'string','Select Generative Method',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.04 0.10 0.55 0.15]); 
         
    obj_handle.GenerativeMethod = uicontrol('Parent',obj_handle.TreePanelInit,...
             'units','normalized',... 
             'Style','Popup',...
             'String',{'Full','Grow','Ramped Half-and-Half'},...
             'Position',[0.65 0.10 0.30 0.20],...
             'Value', 3);           

    % 4.2.2 Functions and Terminals Parameters
    obj_handle.buttonFunctionsTerminals = uicontrol('Parent',obj_handle.parameterGroups,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.05 0.75 0.9 0.1], ...
              'string', 'Functions and Terminals');    
          
    obj_handle.FunctionsTerminalsPanel = uipanel('Parent',obj_handle.settingsPanel,...
             'Title','FUNCTIONS AND TERMINALS','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0 0 0.98 0.98],...
             'FontSize', 10,...
             'visible','off');  
         
    % Active Functions
    obj_handle.ActiveFunctions = uipanel('Parent',obj_handle.FunctionsTerminalsPanel,...
             'Title','Active Functions','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.025 0.45 0.35 0.50],...
             'FontSize', 10,...
             'visible','on'); 
         
   [~, actFnList] = getActiveFunctions(obj_handle);      
    obj_handle.displayActiveFunctions = uicontrol('Parent',obj_handle.ActiveFunctions,...
             'units', 'normalized',...
             'Style','listbox',...
             'string', actFnList,...
             'Position',[0.025 0.025 0.95 0.95],...
             'Max',4,'Min',0,...
             'Value', []);  
         
    obj_handle.buttonRemoveActiveFn = uicontrol('Parent',obj_handle.FunctionsTerminalsPanel,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.46 0.45 0.10 0.20], ...
              'string', 'Remove',...
              'visible','on');
          
    obj_handle.buttonAddActiveFn = uicontrol('Parent',obj_handle.FunctionsTerminalsPanel,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.46 0.70 0.10 0.20], ...
              'string', 'Add',...
              'visible','on');          
    
    % List of Available Functions
    obj_handle.AvailableFunctions = uipanel('Parent',obj_handle.FunctionsTerminalsPanel,...
             'Title','Available Functions','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.65 0.45 0.35 0.50],...
             'FontSize', 10,...
             'visible','on'); 
    
    [~, availFnList] = getAvailableFunctions(obj_handle.fnList,obj_handle.actFnList(:,1));     
    obj_handle.displayAvailableFunctions = uicontrol('Parent',obj_handle.AvailableFunctions,...
             'units', 'normalized',...
             'Style','listbox',...
             'string', availFnList,...
             'Position',[0.025 0.025 0.95 0.95],...
             'Max',4,'Min',0,...
             'Value', []);    
   
   % Terminal Parameters
   obj_handle.textTerminals = uicontrol('Parent',obj_handle.FunctionsTerminalsPanel,...
             'units', 'normalized',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Style','text',...
             'HorizontalAlignment','left',...
             'string', 'Define the terminals to apply',...
             'Position',[0.025 0.21 0.29 0.20]);   
         
    obj_handle.editTerminals = uicontrol('Parent',obj_handle.FunctionsTerminalsPanel,...
             'units','normalized',... 
             'ForegroundColor', [0 0 0],...
             'Style','edit',...
             'HorizontalAlignment','left',...
             'String','',...
             'Position',[0.025 0.235 0.90 0.10]); 
         
   obj_handle.textTerminalsHint = uicontrol('Parent',obj_handle.FunctionsTerminalsPanel,...
             'units', 'normalized',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...
             'Style','text',...
             'HorizontalAlignment','left',...
             'string', 'Comma-separated list of constants or the random number generator "rand"; [e.g] rand, 1, 2',...
             'Position',[0.025 0.133 0.90 0.10]);           
         
   % Numvars & Autovars Parameters
   obj_handle.textAutoVars = uicontrol('Parent',obj_handle.FunctionsTerminalsPanel,...
             'units', 'normalized',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Style','text',...
             'string', 'Specify AUTOVARS',...
             'Position',[0.02 0.01 0.2 0.1]);  
         
    obj_handle.autoVars = uicontrol('Parent',obj_handle.FunctionsTerminalsPanel,...
             'units','normalized',... 
             'Style','Popup',...
             'String',{'0','1'},...
             'Position',[0.25 0.02 0.15 0.1],...
             'Value', 2);   
         
   obj_handle.textNumVars = uicontrol('Parent',obj_handle.FunctionsTerminalsPanel,...
             'units', 'normalized',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Style','text',...
             'string', 'Specify NUMVARS',...
             'Position',[0.5 0.01 0.2 0.1]);  
         
    obj_handle.numVars = uicontrol('Parent',obj_handle.FunctionsTerminalsPanel,...
             'units', 'normalized',...
             'style', 'edit',...
             'string', [],...
             'Position',[0.72 0.02 0.15 0.10]);         
   
         
   % 4.2.3 Genetic Operators
    obj_handle.buttonGeneticOperators = uicontrol('Parent',obj_handle.parameterGroups,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.05 0.65 0.9 0.1], ...
              'string', 'Genetic Operators');    
          
    obj_handle.GeneticOperatorsPanel = uipanel('Parent',obj_handle.settingsPanel,...
             'Title','GENETIC OPERATORS','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0 0 0.98 0.98],...
             'FontSize', 10,...
             'visible','off');  
    
	obj_handle.textReproductionParameter = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Reproduction/replication rate:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.75 0.38 0.17]);   
         
	obj_handle.ReproductionParameter = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', '0.1',...
             'Position',[0.32 0.83 0.15 0.1]);         
         
    obj_handle.GeneticOperatorsText = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Select genetic operators to generate new individuals',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.60 0.55 0.15]);           
         
    obj_handle.displayGeneticOperators = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...
             'Style','listbox',...
             'string', {'Crossover', 'Homologous Crossover', 'Mutation', 'Shrink Mutation', 'Swap Mutation', 'Point Mutation','Brood'},...
             'Position',[0.0255 0.28 0.26 0.38],...
             'Max',4,'Min',0,...
             'Value', []);  
         
    obj_handle.textInitialProbs = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Define initial probabilities:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.3 0.45 0.3 0.15]);  
         
    obj_handle.initialProbs = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units','normalized',... 
             'ForegroundColor', [0 0 0],...
             'Style','edit',...
             'HorizontalAlignment','left',...
             'String','',...
             'Position',[0.3 0.42 0.26 0.10]);
         
    obj_handle.textInitialProbsHint = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'e.g. 0.2,0.1,0.4,0.3,...',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...
             'Position',[0.3 0.30 0.3 0.1]);           
         
   obj_handle.textPointMutation = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Type of Point Mutation:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Position',[0.02 0.12 0.3 0.10],...
             'Visible','on');           
         
    obj_handle.onePointMutation = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...
             'style','radiobutton',...
             'string', '1-Point',...
             'value', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Position',[0.02 0.05 0.20 0.10],...
             'Visible','on');                
         
    obj_handle.nPointMutation = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...
             'style','radiobutton',...
             'string', 'N-Point',...
             'value', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Position',[0.14 0.05 0.20 0.10],...
             'Visible','on');                     
         
   obj_handle.textBroodSize = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Brood Size:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Position',[0.30 0.12 0.3 0.10],...
             'Visible','on');  
         
    obj_handle.broodSize = uicontrol('Parent',obj_handle.GeneticOperatorsPanel,...
             'units','normalized',... 
             'ForegroundColor', [0.45 0.45 0.45],...
             'Style','edit',...
             'HorizontalAlignment','center',...
             'String','10',...
             'Position',[0.30 0.05 0.15 0.10],...
             'Visible','on');                              
               
    obj_handle.AutomaticAdaptationPanel = uipanel('Parent',obj_handle.GeneticOperatorsPanel,...
             'Title','Automatic Adaptation','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.6 0.05 0.40 1],...
             'FontSize', 10,...
             'visible','on');     
         
	obj_handle.textOperatorProbabilities = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Allow automatic adaptation on operator probabilities',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.15 0.80 0.80 0.20]);          
         
    obj_handle.operatorProbabilities = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units', 'normalized',...
             'style','Checkbox',...
             'String',[],...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.85 0.1 0.15]); 
         
	obj_handle.textAdaptWindowSize = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Window Size:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...
             'Position',[0.05 0.76 0.75 0.09]); 
         
	obj_handle.adaptWindowSize = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.65 0.76 0.30 0.09]);     
         
	obj_handle.textNumBackGen = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Number of Back Generations:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...             
             'Position',[0.05 0.64 0.50 0.12]); 
         
	obj_handle.numBackGen = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.65 0.64 0.30 0.09]);    
         
	obj_handle.textPercentBack = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Proportion of credit:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...
             'Position',[0.05 0.52 0.50 0.09]); 
         
	obj_handle.percentBack = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.65 0.52 0.30 0.09]);   
         
	obj_handle.textAdaptInterval = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Generation Interval:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...
             'Position',[0.05 0.40 0.50 0.09]); 
         
	obj_handle.adaptInterval = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.65 0.40 0.30 0.09]); 
         
	obj_handle.textPercentChange = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Proportion of change:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...
             'Position',[0.05 0.28 0.50 0.09]); 
         
	obj_handle.percentChange = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.65 0.28 0.30 0.09]);   
         
	obj_handle.textMinProb = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Prob. Lower Limit:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...
             'Position',[0.05 0.16 0.50 0.09]); 
         
	obj_handle.minProb = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.65 0.16 0.30 0.09]);  
         
   obj_handle.textSmallDifference = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Set Small Difference:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...
             'Position',[0.05 0.04 0.5 0.09]);         
         
    obj_handle.smallDifference = uicontrol('Parent',obj_handle.AutomaticAdaptationPanel,...
             'units','normalized',... 
             'ForegroundColor', [0.45 0.45 0.45],...
             'Style','edit',...
             'HorizontalAlignment','left',...
             'String',[],...
             'Position',[0.65 0.04 0.30 0.09]);          
         
    % 4.2.4 Selection for Reproduction and Expected Number of Children
    obj_handle.buttonReproduction = uicontrol('Parent',obj_handle.parameterGroups,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.05 0.55 0.9 0.1], ...
              'string', 'Reproduction Settings');    
          
    obj_handle.ReproductionPanel = uipanel('Parent',obj_handle.settingsPanel,...
             'Title','REPRODUCTION SETTINGS','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0 0 0.98 0.98],...
             'FontSize', 10,...
             'visible','off');     
         
    obj_handle.SelectionForReproductionPanel = uipanel('Parent',obj_handle.ReproductionPanel,...
             'Title','Selection for Reproduction','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.025 0.15 0.45 0.80],...
             'FontSize', 10,...
             'visible','on'); 
         
    obj_handle.textSamplingMethod = uicontrol('Parent',obj_handle.SelectionForReproductionPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Define the Sampling procedure to select parents.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.70 0.90 0.2]); 
         
    obj_handle.samplingMethod = uicontrol('Parent',obj_handle.SelectionForReproductionPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.samplingMethods,...
             'Position',[0.05 0.55 0.9 0.15],...
             'value', 4);   

	obj_handle.textTournamentSize = uicontrol('Parent',obj_handle.SelectionForReproductionPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Tournament Size:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.28 0.75 0.2]); 
         
	obj_handle.tournamentSize = uicontrol('Parent',obj_handle.SelectionForReproductionPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.65 0.38 0.30 0.1]);   
         
	obj_handle.textDrawsPerSpin = uicontrol('Parent',obj_handle.SelectionForReproductionPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Number of individuals drawn at each sampling step.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0 0.5 0.3]);  
         
	obj_handle.drawsPerSpin = uicontrol('Parent',obj_handle.SelectionForReproductionPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.65 0.15 0.30 0.1]);          
         
    obj_handle.ExpectedChildrenPanel = uipanel('Parent',obj_handle.ReproductionPanel,...
             'Title','Expected Number of Children','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.5 0.55 0.50 0.45],...
             'FontSize', 10,...
             'visible','on');     
         
    obj_handle.textExpectedChildrenMethod = uicontrol('Parent',obj_handle.ExpectedChildrenPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Select the method for computing the expected number of children for each individual.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.55 0.90 0.3]);  
         
    obj_handle.expectedChildrenMethod = uicontrol('Parent',obj_handle.ExpectedChildrenPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.expectedChildren,...
             'Position',[0.05 0.25 0.9 0.15],...
             'value', 2);    
         
    obj_handle.GenerationGapPanel = uipanel('Parent',obj_handle.ReproductionPanel,...
             'Title','Generation Gap','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.5 0.05 0.50 0.45],...
             'FontSize', 10,...
             'visible','on');  
         
	obj_handle.textGenerationGap = uicontrol('Parent',obj_handle.GenerationGapPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Specify the number of new individuals necessary to create a new generation.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.30 0.55 0.5]); 
         
	obj_handle.generationGap = uicontrol('Parent',obj_handle.GenerationGapPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.64 0.4 0.3 0.25]);             
                  
    % 4.2.5 Measuring Fitness, Complexity and Diversity
    obj_handle.buttonMeasurements = uicontrol('Parent',obj_handle.parameterGroups,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.05 0.45 0.9 0.1], ...
              'string', 'Evaluation & Measurements');    
          
    obj_handle.MeasurementsPanel = uipanel('Parent',obj_handle.settingsPanel,...
             'Title','EVALUATION & MEASUREMENTS','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0 0 0.98 0.98],...
             'FontSize', 10,...
             'visible','off');    
         
    obj_handle.FitnessPanel = uipanel('Parent',obj_handle.MeasurementsPanel,...
             'Title','Fitness - Raw and Adjusted','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.025 0.05 0.45 0.90],...
             'FontSize', 10,...
             'visible','on');  
         
    obj_handle.textFitnessMeasuring = uicontrol('Parent',obj_handle.FitnessPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Define the method for computation of Raw Fitness.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.75 0.90 0.2]); 
    
    obj_handle.fitnessMeasuring = uicontrol('Parent',obj_handle.FitnessPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.fitnessMeasureFunctions,...
             'Position',[0.05 0.62 0.9 0.15],...
             'value', 1);    
         
	obj_handle.textPrecision = uicontrol('Parent',obj_handle.FitnessPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Precision:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.42 0.75 0.2]); 
         
	obj_handle.precision = uicontrol('Parent',obj_handle.FitnessPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', obj_handle.settings.precision,...
             'Position',[0.65 0.52 0.30 0.1]); 
         
    obj_handle.textAdjustedFitnessMeasuring = uicontrol('Parent',obj_handle.FitnessPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Define the method for computation of Adjusted Fitness.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.20 0.90 0.2]); 
         
    obj_handle.adjustedFitnessMeasuring = uicontrol('Parent',obj_handle.FitnessPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.adjustedFitnessMeasureFunctions,...
             'Value', 1,...
             'Position',[0.05 0.08 0.9 0.15]);            
         
    obj_handle.ComplexityDiversityPanel = uipanel('Parent',obj_handle.MeasurementsPanel,...
             'Title','Complexity & Diversity','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.5 0.35 0.50 0.60],...
             'FontSize', 10,...
             'visible','on');  
         
    obj_handle.selectMeasureComplexity = uicontrol('Parent',obj_handle.ComplexityDiversityPanel,...
             'units', 'normalized',...
             'style','Checkbox',...
             'String','Store information regarding complexity.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Value', 0,...
             'Position',[0.05 0.7 0.8 0.11]);      
         
    obj_handle.textMeasureDiversity = uicontrol('Parent',obj_handle.ComplexityDiversityPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Select a method for storing information regarding population diversity.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.35 0.90 0.25]); 
         
    obj_handle.measureDiversity = uicontrol('Parent',obj_handle.ComplexityDiversityPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.measureDiversityMethods,...
             'Position',[0.05 0.15 0.9 0.15],...
             'value', 1);    
         
	obj_handle.textKeepEvalSize = uicontrol('Parent',obj_handle.MeasurementsPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Specify the number of evaluations to be kept in memory for fitness computations.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.5 0.08 0.32 0.2]); 
         
	obj_handle.keepEvalSize = uicontrol('Parent',obj_handle.MeasurementsPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.85 0.15 0.15 0.1]);  

    % 4.2.6 Survival
    obj_handle.buttonSurvival = uicontrol('Parent',obj_handle.parameterGroups,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.05 0.35 0.9 0.1], ...
              'string', 'Survival');    
          
    obj_handle.SurvivalPanel = uipanel('Parent',obj_handle.settingsPanel,...
             'Title','SURVIVAL','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0 0 0.98 0.98],...
             'FontSize', 10,...
             'visible','off');

    obj_handle.textElitism = uicontrol('Parent',obj_handle.SurvivalPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Select the elitism level for survival.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.025 0.65 0.45 0.25]); 
         
    obj_handle.elitism = uicontrol('Parent',obj_handle.SurvivalPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.elitismList,...
             'Position',[0.40 0.77 0.3 0.15],...
             'value', 1);   
         
    obj_handle.textSurvivalFn = uicontrol('Parent',obj_handle.SurvivalPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Select the survival function to apply.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.025 0.35 0.45 0.25]); 
         
    obj_handle.survivalFn = uicontrol('Parent',obj_handle.SurvivalPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.survivalFnList,...
             'Position',[0.40 0.47 0.3 0.15],...
             'value', 1);    
         
    % 4.2.7 Limited Resources and Dynamic Population
%     obj_handle.buttonLimitedResources = uicontrol('Parent',obj_handle.parameterGroups,...
%               'style', 'pushbutton',...
%               'units','normalized',...
%               'position', [0.05 0.25 0.9 0.1], ...
%               'string', 'Limited Resources and Population');    
%           
%     obj_handle.LimitedResourcesPopulationPanel = uipanel('Parent',obj_handle.settingsPanel,...
%              'Title','LIMITED RESOURCES AND POPULATION','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
%              'BorderWidth', 0,...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0 0 0.98 0.98],...
%              'FontSize', 10,...
%              'visible','off');   
%          
%     obj_handle.LimitedResourcesPanel = uipanel('Parent',obj_handle.LimitedResourcesPopulationPanel,...
%              'Title','Limited Resources','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
%              'BorderWidth', 1,...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0.025 0.05 0.45 0.90],...
%              'FontSize', 10,...
%              'visible','on');           
%          
%     obj_handle.textMaxResources = uicontrol('Parent',obj_handle.LimitedResourcesPanel,...             
%              'units', 'normalized',...        
%              'style', 'Text',...
%              'HorizontalAlignment','left',...
%              'string', 'Specify the maximum amount of resources available.',...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0.05 0.55 0.6 0.4]); 
%          
% 	obj_handle.maxResources = uicontrol('Parent',obj_handle.LimitedResourcesPanel,...
%              'units', 'normalized',...        
%              'style', 'edit',...
%              'HorizontalAlignment','center',...
%              'string', [],...
%              'Position',[0.70 0.82 0.25 0.1]);  
%          
%     obj_handle.textDynamicResources = uicontrol('Parent',obj_handle.LimitedResourcesPanel,...             
%              'units', 'normalized',...        
%              'style', 'Text',...
%              'HorizontalAlignment','left',...
%              'string', 'Specify the type of limit on the available resources.',...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0.05 0.45 0.60 0.3]); 
%          
%     obj_handle.dynamicResourcesFn = uicontrol('Parent',obj_handle.LimitedResourcesPanel,...
%              'units','normalized',...        
%              'style','Popup',...
%              'string', {'Constant','Increase','Increase or Decrease'},...
%              'Position',[0.70 0.6 0.25 0.15],...
%              'value', 1);   
%          
%     obj_handle.textResourcesPopSize = uicontrol('Parent',obj_handle.LimitedResourcesPanel,...             
%              'units', 'normalized',...        
%              'style', 'Text',...
%              'HorizontalAlignment','left',...
%              'string', 'How should the resources be used after exhaustion?',...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0.05 0.25 0.60 0.3]); 
%          
%     obj_handle.resourcesPopSize = uicontrol('Parent',obj_handle.LimitedResourcesPanel,...
%              'units','normalized',...        
%              'style','Popup',...
%              'string', obj_handle.resourcesPopSizeList,...
%              'Position',[0.7 0.42 0.25 0.15],...
%              'value', 1);      
%          
%     obj_handle.textResourcesFitness = uicontrol('Parent',obj_handle.LimitedResourcesPanel,...             
%              'units', 'normalized',...        
%              'style', 'Text',...
%              'HorizontalAlignment','left',...
%              'string', 'Improvement in survival based on best-of-run mean population fitness ("normal_accept") or mean population fitness of previous generation ("light_accept").',...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0.05 0.05 0.60 0.3]); 
%          
%     obj_handle.resourcesFitness = uicontrol('Parent',obj_handle.LimitedResourcesPanel,...
%              'units','normalized',...        
%              'style','Popup',...
%              'string', obj_handle.resourcesFitnessList,...
%              'Position',[0.7 0.2 0.25 0.15],...
%              'value', 1);  
%          
%     obj_handle.DynamicPopulationPanel = uipanel('Parent',obj_handle.LimitedResourcesPopulationPanel,...
%              'Title','Dynamic Population','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
%              'BorderWidth', 1,...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0.5 0.35 0.50 0.60],...
%              'FontSize', 10,...
%              'visible','on');       
%          
%     obj_handle.textDynamicPopulation = uicontrol('Parent',obj_handle.DynamicPopulationPanel,...             
%              'units', 'normalized',...        
%              'style', 'Text',...
%              'HorizontalAlignment','left',...
%              'string', 'For dynamic population techniques specify:',...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0.05 0.55 0.90 0.3]);    
% 
%     obj_handle.textPeriodeParameter = uicontrol('Parent',obj_handle.DynamicPopulationPanel,...             
%              'units', 'normalized',...        
%              'style', 'Text',...
%              'HorizontalAlignment','left',...
%              'string', 'Periode parameter:',...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0.05 0.55 0.90 0.3]);   
%          
% 	obj_handle.periodeParameter = uicontrol('Parent',obj_handle.DynamicPopulationPanel,...
%              'units', 'normalized',...        
%              'style', 'edit',...
%              'HorizontalAlignment','center',...
%              'string', [],...
%              'Position',[0.6 0.70 0.25 0.15]);  
%          
%     obj_handle.textAjoutParameter = uicontrol('Parent',obj_handle.DynamicPopulationPanel,...             
%              'units', 'normalized',...        
%              'style', 'Text',...
%              'HorizontalAlignment','left',...
%              'string', 'Upon fitness stagnation, the intended population size should be:',...
%              'BackgroundColor',[0.8 0.8 0.8],...
%              'Position',[0.05 0.1 0.50 0.4]);   
%          
%     obj_handle.ajoutParameter = uicontrol('Parent',obj_handle.DynamicPopulationPanel,...
%              'units','normalized',...        
%              'style','Popup',...
%              'string', obj_handle.ajoutList,...
%              'Position',[0.6 0.25 0.25 0.15],...
%              'value', 1);
%          
    % 4.2.8 Operational Settings
    obj_handle.buttonOperational = uicontrol('Parent',obj_handle.parameterGroups,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.05 0.25 0.9 0.1], ...
              'string', 'Operational Settings');    
          
    obj_handle.OperationalSettingsPanel = uipanel('Parent',obj_handle.settingsPanel,...
             'Title','OPERATIONAL SETTINGS','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0 0 0.98 0.98],...
             'FontSize', 10,...
             'visible','off');    
         
    obj_handle.StopConditionsPanel = uipanel('Parent',obj_handle.OperationalSettingsPanel,...
             'Title','Stop Conditions','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.65 0.98 0.30],...
             'FontSize', 10,...
             'visible','on');    
         
    obj_handle.textPercentageStop = uicontrol('Parent',obj_handle.StopConditionsPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', '% of fitness cases to obey stop condition:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.30 0.30 0.5]);   
         
	obj_handle.percentageStop = uicontrol('Parent',obj_handle.StopConditionsPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.30 0.30 0.15 0.45]);  
         
    obj_handle.textStopCondition = uicontrol('Parent',obj_handle.StopConditionsPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', '% variation in expected result:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.50 0.15 0.30 0.5]);   
         
	obj_handle.stopCondition = uicontrol('Parent',obj_handle.StopConditionsPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', [],...
             'Position',[0.82 0.30 0.15 0.45]);         
         
    obj_handle.SavingResultsPanel = uipanel('Parent',obj_handle.OperationalSettingsPanel,...
             'Title','Saving Results','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.10 0.48 0.50],...
             'FontSize', 10,...
             'visible','on');    
         
    obj_handle.textSaveToFile = uicontrol('Parent',obj_handle.SavingResultsPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'When do you wish to save variables?',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.60 0.5 0.30]);  
         
    obj_handle.saveToFile = uicontrol('Parent',obj_handle.SavingResultsPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.savetofilelist,...
             'Position',[0.55 0.70 0.35 0.15],...
             'value', 1);    
         
    obj_handle.textSaveName = uicontrol('Parent',obj_handle.SavingResultsPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Specify the file name to save.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor', [0.45 0.45 0.45],...
             'Position',[0.05 0.35 0.9 0.15]);  
         
	obj_handle.saveName = uicontrol('Parent',obj_handle.SavingResultsPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','left',...
             'string', [],...
             'Position',[0.05 0.10 0.90 0.25]);         
         
    obj_handle.TextualOutputPanel = uipanel('Parent',obj_handle.OperationalSettingsPanel,...
             'Title','Textual Output','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.52 0.10 0.48 0.50],...
             'FontSize', 10,...
             'visible','on');           
         
    obj_handle.textOutput = uicontrol('Parent',obj_handle.TextualOutputPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Information regarding algorithm state:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.60 0.9 0.15]);  
         
    obj_handle.output = uicontrol('Parent',obj_handle.TextualOutputPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.outputlist,...
             'Position',[0.05 0.35 0.90 0.15],...
             'value', 2);     
         
    % 4.2.9 Bloat Control
    obj_handle.buttonBloatControl = uicontrol('Parent',obj_handle.parameterGroups,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.05 0.15 0.9 0.1], ...
              'string', 'Bloat Control');      
          
    obj_handle.BloatControlPanel = uipanel('Parent',obj_handle.settingsPanel,...
             'Title','BLOAT CONTROL','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0 0 0.98 0.98],...
             'FontSize', 10,...
             'visible','off');  
         
    % Depth and Size Limits    
    
    obj_handle.TreePanelDSLimits = uipanel('Parent',obj_handle.BloatControlPanel,...
             'Title','Depth and Size Limits','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.05 0.50 0.90],...
             'FontSize', 10,...
             'visible','on');  
         
    % Stric Depth Limit Technique         
    obj_handle.infoBloatControl = uicontrol('Parent',obj_handle.TreePanelDSLimits,...
             'units', 'normalized',...
             'style', 'Text',...
             'string', 'Select which bloat control techniques to apply',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.03 0.8 0.90 0.10]);          
         
    obj_handle.strictDepthLimit = uicontrol('Parent',obj_handle.TreePanelDSLimits,...
             'units', 'normalized',...
             'style','Checkbox',...
             'string','Strict Depth Limit',...
             'value', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.65 0.80 0.10]);  
         
    obj_handle.valueStrictDepthLimit = uicontrol('Parent',obj_handle.TreePanelDSLimits,...
             'units', 'normalized',...
             'style', 'edit',...
             'string',17,...
             'Position',[0.70 0.65 0.20 0.10]);  
    
    % Dynamic Depth Limit Techniques         
    obj_handle.dynamicMTD = uicontrol('Parent',obj_handle.TreePanelDSLimits,...
             'units', 'normalized',...
             'style','Checkbox',...
             'string', 'Dynamic Depth Limits',...
             'value', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.50 0.80 0.10]); 
         
    obj_handle.standardDMTD = uicontrol('Parent',obj_handle.TreePanelDSLimits,...
             'units', 'normalized',...
             'style','radiobutton',...
             'string', 'Standard Dynamic Max. Tree Depth',...
             'value', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.1 0.35 0.80 0.10]);     
         
    obj_handle.heavyDMTD = uicontrol('Parent',obj_handle.TreePanelDSLimits,...
             'units', 'normalized',...
             'style','radiobutton',...
             'string', 'Heavy Dynamic Limit',...
             'value', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.1 0.25 0.50 0.10]);            
                  
    obj_handle.valueDynamicMTD = uicontrol('Parent',obj_handle.TreePanelDSLimits,...
             'units', 'normalized',...
             'style', 'edit',...
             'string', '6',...
             'Position',[0.70 0.50 0.20 0.10]); 
         
    obj_handle.veryheavyDMTD = uicontrol('Parent',obj_handle.TreePanelDSLimits,...
             'units', 'normalized',...
             'style','Checkbox',...
             'string', 'Check to apply very heavy variant',...
             'value', 0,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.15 0.12 0.80 0.10],...
             'visible', 'off');  
         
    % Operator Equalization    
    
    obj_handle.OperatorEqualisationPanel = uipanel('Parent',obj_handle.BloatControlPanel,...
             'Title','Operator Equalisation','FontSize',12,'ForegroundColor', [0.45 0.45 0.45],...... 
             'BorderWidth', 1,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.55 0.05 0.45 0.90],...
             'FontSize', 10,...
             'visible','on');                   
         
    obj_handle.operatorEqualisation = uicontrol('Parent',obj_handle.OperatorEqualisationPanel,...
             'units', 'normalized',...
             'style','Checkbox',...
             'String','Use Operator Equalisation',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.05 0.80 0.9 0.15]); 
         
    obj_handle.textOpeqType = uicontrol('Parent',obj_handle.OperatorEqualisationPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Define the Operator Equalisation Method.',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Position',[0.05 0.60 0.90 0.15]); 
         
    obj_handle.opeqType = uicontrol('Parent',obj_handle.OperatorEqualisationPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.operatoreqlist,...
             'Value', 1,...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Position',[0.05 0.50 0.9 0.15]); 
         
    obj_handle.textBinSize = uicontrol('Parent',obj_handle.OperatorEqualisationPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', '% Bin Size:',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Position',[0.05 0.35 0.30 0.10]);   
         
	obj_handle.binSize = uicontrol('Parent',obj_handle.OperatorEqualisationPanel,...
             'units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','center',...
             'string', '1',...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Position',[0.35 0.35 0.35 0.12]);   
         
    obj_handle.textOpeqTarget = uicontrol('Parent',obj_handle.OperatorEqualisationPanel,...             
             'units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'string', 'Specify Operator Equalisation Target',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Position',[0.05 0.20 0.90 0.10]); 
         
    obj_handle.opeqTarget = uicontrol('Parent',obj_handle.OperatorEqualisationPanel,...
             'units','normalized',...        
             'style','Popup',...
             'string', obj_handle.operatoreqTargetlist,...
             'ForegroundColor',[0.45 0.45 0.45],...
             'Value', 1,...
             'Position',[0.05 0.10 0.9 0.10]);          
         
         
         
    % 4.3 BACK TO MAIN WINDOW BUTTON
    obj_handle.buttonBack = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.85 0.05 0.13 0.1], ...
              'string', 'Done',...
              'visible','off');
          
    % 4.4 SAVE SETTINGS BUTTON
    obj_handle.buttonSaveSettings = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.02 0.05 0.13 0.1], ...
              'string', 'Save Settings',...
              'visible','off');  
          
    % 4.5 LOAD SETTINGS BUTTON
    obj_handle.buttonUploadSettings = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.16 0.05 0.13 0.1], ...
              'string', 'Load Settings',...
              'visible','off');  
          
    % 4.6 RESET SETTINGS BUTTON
    obj_handle.buttonResetSettings = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.30 0.05 0.13 0.1], ...
              'string', 'Reset Settings',...
              'visible','off');   
          
    % 4.7 OFFLINE GRAPHICAL OUTPUT
    obj_handle.offGraphicOutputPanel = uipanel('Title','Offline Graphical Output','FontSize',12,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'Position',[0.02 0.05 .82 .23],...
             'Visible','off');  
         
    % 4.7.1 Graphical Output Buttons
    obj_handle.buttonAccuracyComplexity = uicontrol('Parent',obj_handle.offGraphicOutputPanel,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.02 0.25 0.22 0.5], ...
              'string', 'Accuracy vs Complexity'); 
          
    obj_handle.buttonPareto = uicontrol('Parent',obj_handle.offGraphicOutputPanel,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.26 0.25 0.12 0.5], ...
              'string', 'Pareto'); 
          
    obj_handle.buttonDesiredObtained = uicontrol('Parent',obj_handle.offGraphicOutputPanel,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.40 0.25 0.18 0.5], ...
              'string', 'Desired vs Obtained'); 
          
    obj_handle.buttonOperatorEvolution = uicontrol('Parent',obj_handle.offGraphicOutputPanel,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.60 0.25 0.18 0.5], ...
              'string', 'Operator Evolution'); 
          
    obj_handle.buttonTreeVisualization = uicontrol('Parent',obj_handle.offGraphicOutputPanel,...
              'style', 'pushbutton',...
              'units','normalized',...
              'position', [0.80 0.25 0.18 0.5], ...
              'string', 'Draw Best Tree');           
          
         
 
 % 5. SET CALLBACK FUNCTIONS  
 
    % Attribute @function (callback function) to GUI Object obj_handle.object
    
    % Control Functions
    set(obj_handle.buttonRun, 'callback', {@StartGPLAB, obj_handle});
    set(obj_handle.buttonContinueRun, 'callback', {@StartGPLAB, obj_handle});
    set(obj_handle.advancedSettings, 'callback', {@setParameters, obj_handle});
    set(obj_handle.loadRun, 'callback', {@loadRun, obj_handle});
    set(obj_handle.saveRun,  'callback', {@saveRun, obj_handle});
    set(obj_handle.clearRun, 'callback', {@clearRun, obj_handle});
    set(obj_handle.buttonBack, 'callback', {@backtoMainPanel, obj_handle});
    set(obj_handle.buttonSaveSettings, 'callback', {@saveSettings, obj_handle});  
    set(obj_handle.buttonUploadSettings, 'callback', {@uploadSettings, obj_handle});  
    set(obj_handle.buttonResetSettings, 'callback', {@resetSettings, obj_handle});  
    set(obj_handle.buttonAccuracyComplexity,'callback', {@plotAccuracyComplexity, obj_handle});
    set(obj_handle.buttonPareto,'callback', {@plotPareto, obj_handle});
    set(obj_handle.buttonDesiredObtained,'callback', {@plotDesiredObtained, obj_handle});
    set(obj_handle.buttonOperatorEvolution,'callback', {@plotOperatorEvolution, obj_handle});
    set(obj_handle.buttonTreeVisualization,'callback', {@plotTreeVisualization, obj_handle});
    
    % Main Panel Functions
    set(obj_handle.importMethod,'callback', {@setImportMethod, obj_handle});
    set(obj_handle.buttonSelectDataX, 'callback', {@selectDataX, obj_handle});
    set(obj_handle.buttonSelectDataY, 'callback', {@selectDataY, obj_handle});
    set(obj_handle.buttonSelectTestDataCheck, 'callback', {@showTestData, obj_handle});
    set(obj_handle.buttonSelectTestDataX, 'callback', {@selectTestDataX, obj_handle});
    set(obj_handle.buttonSelectTestDataY, 'callback', {@selectTestDataY, obj_handle});  
    set(obj_handle.NumberGenerations, 'callback', {@getGenerationNumber, obj_handle});
    set(obj_handle.NumberGenerationsContinue, 'callback', {@getGenerationNumber, obj_handle});    
    set(obj_handle.PopulationSize, 'callback', {@getPopulationSize, obj_handle});
    set(obj_handle.SelectRGO, 'callback', {@selectRGOplot, obj_handle});
    
    % Advanced Settings Panel Functions 
    set(obj_handle.buttonTreeSettings, 'callback', {@switchSettingsPanel1, obj_handle});  
    set(obj_handle.buttonFunctionsTerminals, 'callback', {@switchSettingsPanel2, obj_handle});  
    set(obj_handle.buttonGeneticOperators, 'callback', {@switchSettingsPanel3, obj_handle});  
    set(obj_handle.buttonReproduction, 'callback', {@switchSettingsPanel4, obj_handle});  
    set(obj_handle.buttonMeasurements, 'callback', {@switchSettingsPanel5, obj_handle});  
    set(obj_handle.buttonSurvival, 'callback', {@switchSettingsPanel6, obj_handle});     
    %set(obj_handle.buttonLimitedResources, 'callback', {@switchSettingsPanel7, obj_handle}); 
    set(obj_handle.buttonOperational, 'callback', {@switchSettingsPanel8, obj_handle}); 
    set(obj_handle.buttonBloatControl, 'callback', {@switchSettingsPanel9, obj_handle}); 
    set(obj_handle.DepthNodes, 'callback', {@setDepthNodes, obj_handle});
    set(obj_handle.InitMaxDepthSize, 'callback', {@setInitMaxDepthSize, obj_handle}); 
    set(obj_handle.GenerativeMethod, 'callback', {@setGenerativeMethod, obj_handle});
    set(obj_handle.strictDepthLimit, 'callback', {@setStricDepthLimit, obj_handle});
    set(obj_handle.valueStrictDepthLimit, 'callback', {@getStricDepthLimitValue, obj_handle});
    set(obj_handle.dynamicMTD, 'callback', {@setDynamicMTD, obj_handle}); 
    set(obj_handle.valueDynamicMTD, 'callback', {@getDynamicMTDValue, obj_handle});
    set(obj_handle.standardDMTD, 'callback', {@setDMTDstandard, obj_handle});
    set(obj_handle.heavyDMTD, 'callback', {@setDMTDheavy, obj_handle}); 
    set(obj_handle.veryheavyDMTD, 'callback', {@setDMTDveryheavy, obj_handle});    
    set(obj_handle.displayActiveFunctions, 'callback', {@getActFnSelection, obj_handle});
    set(obj_handle.displayAvailableFunctions, 'callback', {@getFnSelection, obj_handle});
    set(obj_handle.buttonAddActiveFn, 'callback', {@addFn, obj_handle}); 
    set(obj_handle.buttonRemoveActiveFn, 'callback', {@removeFn, obj_handle}); 
    set(obj_handle.editTerminals, 'callback', {@getTerminals, obj_handle}); 
    set(obj_handle.autoVars, 'callback', {@setAutoVars, obj_handle}); 
    set(obj_handle.numVars, 'callback', {@setNumVars, obj_handle});     
    set(obj_handle.ReproductionParameter, 'callback', {@getReproductionParameter, obj_handle});     
    set(obj_handle.displayGeneticOperators, 'callback', {@selectOperator, obj_handle});
    set(obj_handle.operatorProbabilities, 'callback', {@setAGO, obj_handle}); 
    set(obj_handle.onePointMutation, 'callback', {@setOnePointMutation, obj_handle}); 
    set(obj_handle.nPointMutation, 'callback', {@setNPointMutation, obj_handle});     
    set(obj_handle.broodSize, 'callback', {@setBroodSize, obj_handle}); 
    set(obj_handle.adaptWindowSize, 'callback', {@setAdaptWindowSize, obj_handle});
    set(obj_handle.numBackGen, 'callback', {@setNumBackGen, obj_handle});
    set(obj_handle.percentBack, 'callback', {@setPercentBack, obj_handle});
    set(obj_handle.adaptInterval,'callback', {@setAdaptInterval, obj_handle});
    set(obj_handle.percentChange, 'callback', {@setPercentChange, obj_handle});
    set(obj_handle.minProb, 'callback', {@setMinProb, obj_handle});
    set(obj_handle.initialProbs, 'callback',{@setInitialProbs, obj_handle});
    set(obj_handle.smallDifference, 'callback',{@setSmallDifference, obj_handle});
    set(obj_handle.samplingMethod, 'callback',{@setSamplingMethod, obj_handle});
    set(obj_handle.tournamentSize,'callback',{@setTournamentSize, obj_handle});
    set(obj_handle.drawsPerSpin,'callback',{@setDrawsPerSpin, obj_handle});
    set(obj_handle.expectedChildrenMethod,'callback',{@setExpectedChildrenMethod, obj_handle});
    set(obj_handle.generationGap,'callback',{@setGenerationGap, obj_handle});        
    set(obj_handle.fitnessMeasuring,'callback',{@setFitnessMeasuring, obj_handle});
    set(obj_handle.precision,'callback',{@setPrecision, obj_handle});
    set(obj_handle.adjustedFitnessMeasuring,'callback',{@setAdjustedFitnessMeasuring, obj_handle});
    set(obj_handle.keepEvalSize,'callback',{@setKeepEvalSize, obj_handle});
    set(obj_handle.selectMeasureComplexity,'callback',{@setMeasureComplexity, obj_handle});
    set(obj_handle.measureDiversity,'callback',{@setMeasureDiversity, obj_handle});
    set(obj_handle.elitism,'callback',{@setElitism, obj_handle});
    set(obj_handle.survivalFn,'callback',{@setSurvivalFn, obj_handle});
    %set(obj_handle.maxResources,'callback',{@setMaxResources, obj_handle});
    %set(obj_handle.dynamicResourcesFn,'callback',{@setDynamicResourcesFn, obj_handle});
    %set(obj_handle.resourcesPopSize,'callback',{@setResourcesPopSize, obj_handle});
    %set(obj_handle.resourcesFitness,'callback',{@setResourcesFitness, obj_handle});
    %set(obj_handle.periodeParameter,'callback',{@setPeriodeParameter, obj_handle});
    %set(obj_handle.ajoutParameter,'callback',{@setAjoutParameter, obj_handle});
    set(obj_handle.percentageStop, 'callback',{@setPercentageStop, obj_handle});
    set(obj_handle.stopCondition, 'callback',{@setStopCondition, obj_handle});
    set(obj_handle.saveToFile, 'callback',{@setSaveToFile, obj_handle});
    set(obj_handle.saveName, 'callback',{@setSaveName, obj_handle});
    set(obj_handle.output, 'callback',{@setOutput, obj_handle});
    set(obj_handle.operatorEqualisation, 'callback',{@setOperatorEqualisation, obj_handle});
    set(obj_handle.opeqType, 'callback',{@setOpeqMethod, obj_handle});
    set(obj_handle.binSize, 'callback',{@setBinSize, obj_handle});
    set(obj_handle.opeqTarget, 'callback',{@setOpeqTarget, obj_handle});
    
    guidata(figure_handle,obj_handle) 
    
    set(figure_handle,'Visible','on')


%% DEFINING CALLBACK FUNCTIONS

    function StartGPLAB(~,~,~)
       handles = guidata(gcbo);
       if ((isempty(handles.settings.datafilex) || isempty(handles.settings.datafiley)) && isempty(handles.loadedRun))
           msgbox('Please load your data before running the algorithm');
       elseif isempty(handles.gnumber)
           msgbox('Please insert number of generations before running the algorithm');
       elseif  isempty(handles.popsize) && isempty(handles.loadedRun)
           msgbox('Please insert population size before running the algorithm');
       else
           % Activate the Outputs Panel
           output_figure = figure('MenuBar','none',...
               'Toolbar','none',...
               'Position', [xpos ypos*0.40 guisize(1) guisize(2)/2.4],...
               'Name',['Output Messages ' '(' num2str(handles.runnumber(end)) ')'],...
               'NumberTitle','off',...
               'Visible','on');
           output_handle = guihandles(output_figure);  
           output_handle.outputMessagesList = {'The algorithm is starting...'};
           output_handle.outputMessages = uicontrol('units', 'normalized',...
             'Style','listbox',...
             'string', output_handle.outputMessagesList,...
             'Position',[0.02 0.05 0.70 0.55],...
             'Max',4,'Min',0,...
             'Value', [],...
             'Enable','Inactive'); 
           output_handle.statusPanel = uipanel('Title','Algorithm Progress','FontSize',10,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0 0 0],...
             'Position',[0.02 0.65 .70 .30]'); 
           output_handle.statisticsPanel = uipanel('Title','Status','FontSize',10,...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0 0 0],...
             'Position',[0.74 0.05 .24 .90]');    
           output_handle.statisticsInfo = uicontrol('Parent', output_handle.statisticsPanel,...
             'units','normalized',...
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0 0 0],...
             'Position',[0.05 0.02 0.90 0.96],...
             'FontSize', 8,...
             'visible','off');           
           output_handle.progressBar = uicontrol('Parent', output_handle.statusPanel,...
             'units','normalized',...
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'BackgroundColor',[0.1 0.2 0.8],...
             'ForegroundColor',[1 1 1],...
             'Position',[0 0.1 0.01 0.80],...
             'FontSize', 14);              
           guidata(output_figure,output_handle)
           
           % Update Active Function List
           handles.settings.functions = handles.actFnList;
           
           % Execute the Algorithm
           if isempty(handles.loadedRun)
               % 1st Run
               set(obj_handle.buttonPauseRun,'Visible','On');
               disp([handles.settings])
               [v,b]=gplab(handles.gnumber,handles.popsize,handles.settings);
           else
               % Continue Run
               handles.Generation = handles.loadedRun.vars.state.generation + 1;
               guidata(gcbo,handles);
               set(obj_handle.buttonPauseRun,'Visible','On');
               [v,b]=gplab(handles.gnumber,handles.loadedRun.vars);
           end
            
           % Store Output for Plotting and Continue Run
           try 
               handles.results.vars = v;
               handles.results.best = b;
               set(obj_handle.offGraphicOutputPanel,'Visible','on');
               set(obj_handle.saveRun,'Visible','On');
               handles.finishedrun = 1;
               handles.runnumber(end+1) = handles.runnumber(end) + 1;
               
               handles.loadedRun = handles.results;
               set(handles.GenerationNumberText,'Visible','Off')
               set(handles.NumberGenerations,'Visible','Off')
               set(handles.PopulationSizeText,'Visible','Off')
               set(handles.PopulationSize,'Visible','Off')
               set(handles.GenerationNumberContinueText,'Visible','On')
               set(handles.NumberGenerationsContinue,'Visible','On')
               set(obj_handle.buttonPauseRun,'Visible','Off');
               set(obj_handle.buttonContinueRun,'Visible','On');
               set(obj_handle.clearRun,'Visible','On');
           catch
               msgbox('ERROR: There was an error during execution.')
           end
       end
       guidata(gcbo,handles)
    end

    function setParameters(~,~,~)
        handles = guidata(gcbo);
        set(handles.logoBox, 'visible', 'off'); 
        set(handles.sloganBox, 'visible', 'off'); 
        set(handles.versionControl, 'visible', 'off'); 
        set(handles.buttonRun, 'visible', 'off');
        set(handles.loadRun, 'visible', 'off');
        set(handles.RuntimeGraphicOutput, 'visible', 'off');    
        set(handles.basicSettings, 'visible', 'off');           
        set(handles.UploadData, 'visible', 'off');
        set(handles.advancedSettings, 'visible', 'off'); 
        set(handles.offGraphicOutputPanel, 'visible', 'off');
        set(handles.saveRun, 'visible','off');
        set(handles.clearRun, 'visible','off');
        set(handles.buttonContinueRun, 'visible','off'); 
        set(handles.loadedFileInfo, 'visible','off'); 
        
        set(handles.smalllogoBox, 'visible', 'on');
        set(handles.settingsText, 'visible', 'on');
        set(handles.buttonBack, 'visible', 'on');
        set(handles.buttonSaveSettings, 'visible', 'on');
        set(handles.buttonUploadSettings, 'visible', 'on');
        set(handles.buttonResetSettings, 'visible', 'on');
        set(handles.parameterGroups, 'visible', 'on');
        set(handles.settingsPanel, 'visible', 'on');
        guidata(gcbo, handles);
    end

    function backtoMainPanel(~,~,~)
        handles = guidata(gcbo);
        set(handles.smalllogoBox, 'visible', 'off');
        set(handles.settingsText, 'visible', 'off');
        set(handles.buttonBack, 'visible', 'off');
        set(handles.buttonSaveSettings, 'visible', 'off');
        set(handles.buttonUploadSettings, 'visible', 'off');
        set(handles.buttonResetSettings, 'visible', 'off');        
        set(handles.parameterGroups, 'visible', 'off');
        set(handles.settingsPanel, 'visible', 'off');        
        
        set(handles.logoBox, 'visible', 'on'); 
        set(handles.sloganBox, 'visible', 'on'); 
        set(handles.versionControl, 'visible', 'on'); 
        set(handles.buttonRun, 'visible', 'on');
        set(handles.loadRun, 'visible', 'on');
        set(handles.RuntimeGraphicOutput, 'visible', 'on');    
        set(handles.basicSettings, 'visible', 'on');           
        set(handles.UploadData, 'visible', 'on');
        set(handles.advancedSettings, 'visible', 'on');
        if (handles.finishedrun == 1) || (handles.loadedRunCheck == 1)
            set(handles.clearRun, 'visible','on'); 
            set(handles.buttonContinueRun, 'visible','on');
        end
        if (handles.finishedrun == 1)
            set(handles.offGraphicOutputPanel, 'Visible', 'on'); 
            set(handles.saveRun, 'visible','on');
        end
        if (handles.loadedRunCheck == 1)        
            set(handles.LoadedRunData, 'visible','on');
            set(handles.loadedFileInfo, 'visible','on');
            set(handles.UploadData,'Visible','Off');
        end
        guidata(gcbo, handles);    
    end

    function saveSettings(~,~,~)
        handles = guidata(gcbo);
        [filename,filepath] = uiputfile('*.mat','Save Current Settings As');
        file = [filepath filename];
        if (file)
            settings = handles.settings;
            save(file,'settings')
        end
        guidata(gcbo, handles);    
    end

    function uploadSettings(~,~,~)
        handles = guidata(gcbo);
        [filename,filepath] = uigetfile('*.mat','Select your Settings file',handles.defaultpath);
        if exist('filepath','var') && ischar(filepath)
            handles.defaultpath = filepath;
        end            
        file = [filepath filename];
        if (file)
            output = load(file);
            handles.settings = output.settings;
        end
        guidata(gcbo, handles);    
    end

    function resetSettings(~,~,~)
        handles = guidata(gcbo);
        handles.settings = resetparams;
        guidata(gcbo, handles);    
    end

    function loadRun(~,~,~)
        handles = guidata(gcbo);
        [filename,filepath] = uigetfile('*.mat','Select your Settings file',handles.defaultpath);
        if exist('filepath','var') && ischar(filepath)
            handles.defaultpath = filepath;
        end  
        file = [filepath filename];
        handles.filesmessage = filename;
        if (file)
            output = load(file);
            try
               handles.loadedRunCheck = 1;
               handles.loadedRun = output.results;
               set(handles.clearRun,'Visible','On');
               set(handles.buttonContinueRun,'Visible','On');
               set(handles.LoadedRunData, 'Visible','On');
               set(handles.UploadData, 'Visible','Off');
               set(handles.loadedFileInfo,'Visible','On','String', sprintf('The following file was loaded:\n "%s"', handles.filesmessage));
               set(handles.GenerationNumberText,'Visible','Off')
               set(handles.NumberGenerations,'Visible','Off')
               set(handles.PopulationSizeText,'Visible','Off')
               set(handles.PopulationSize,'Visible','Off')
               set(handles.GenerationNumberContinueText,'Visible','On')
               set(handles.NumberGenerationsContinue,'Visible','On')
            catch
               msgbox('There is no Run data saved in this file. Please select another one.')
            end
        end
        guidata(gcbo, handles);    
    end

    function saveRun(~,~,~)
        handles = guidata(gcbo);
        [filename,filepath] = uiputfile('*.mat','Save Current Settings As',handles.defaultpath);
        if exist('filepath','var') && ischar(filepath)
            handles.defaultpath = filepath;
        end          
        file = [filepath filename];
        if (file)
            results = handles.results;
            save(file,'results')
        end        
        guidata(gcbo, handles);    
    end

    function clearRun(~,~,~)
        handles = guidata(gcbo);
        handles.loadedRun = [];
        handles.Generation = 0;
        handles.finishedrun = 0;
        handles.loadedRunCheck = 0;
        set(handles.clearRun,'Visible','Off');
        set(handles.buttonContinueRun,'Visible','Off');
        set(handles.saveRun,'Visible','Off');
        set(handles.offGraphicOutputPanel,'Visible','Off');
        set(handles.UploadData, 'Visible','On');
        set(handles.LoadedRunData,'Visible','Off');
        set(handles.loadedFileInfo,'Visible','Off');
        set(handles.GenerationNumberText,'Visible','On')
        set(handles.NumberGenerations,'Visible','On')
        set(handles.PopulationSizeText,'Visible','On')
        set(handles.PopulationSize,'Visible','On')
        set(handles.GenerationNumberContinueText,'Visible','Off')
        set(handles.NumberGenerationsContinue,'Visible','Off')        
        guidata(gcbo, handles); 
    end

    function setImportMethod(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.importMethod,'Value');
        handles.settings.files2data = handles.importMethodList{value};
        if strcmp(handles.settings.files2data,'anttrail')
            handles.actFnList = handles.fnListAnt;
            handles.settings = setterminals(handles.settings,handles.terminalsAnts{:});
            handles.settings.calcfitness = handles.fitnessMeasureFunctionsAnts{1};
            handles.settings.autovars = 0;  
            handles.settings.lowerisbetter = 0;
            set(handles.displayAvailableFunctions,'string', {});
            set(handles.displayActiveFunctions,'string', handles.actFnList(:,1));
            set(handles.fitnessMeasuring,'string', handles.fitnessMeasureFunctionsAnts);
            terminalstring = '';
            for i = 1:length(handles.terminalsAnts)
                terminalstring = [terminalstring ',' handles.terminalsAnts{i}];
            end
            terminalstring = terminalstring(2:end);
            set(handles.editTerminals,'String', terminalstring); 
            set(handles.autoVars,'Value',1);
        elseif strcmp(handles.settings.files2data,'xy2inout')              
            tempparams = resetparams();
            handles.actFnList = tempparams.functions; 
            handles.settings = setterminals(handles.settings,{});
            handles.settings.calcfitness = handles.fitnessMeasureFunctions{1};
            handles.settings.autovars = 1;
            handles.settings.lowerisbetter = 1;
            [~, availFnList] = getAvailableFunctions(handles.fnList,handles.actFnList(:,1)); 
            set(handles.displayAvailableFunctions,'string', availFnList);
            set(handles.displayActiveFunctions,'string', handles.actFnList(:,1));
            set(handles.fitnessMeasuring,'string', handles.fitnessMeasureFunctions) 
            set(handles.editTerminals,'String', {});
            set(handles.autoVars,'Value',2);            
        end
        guidata(gcbo, handles);         
    end

    function selectDataX(~,~,~)
        handles = guidata(gcbo);
        [filename,filepath] = uigetfile('*.txt','Select the TXT file with X-axis Data',handles.defaultpath);
        if exist('filepath','var') && ischar(filepath)
            handles.defaultpath = filepath;
        end  
        handles.settings.datafilex = [filepath,filename];
        guidata(gcbo, handles); 
    end

    function selectDataY(~,~,~)
        handles = guidata(gcbo);
        [filename,filepath] = uigetfile('*.txt','Select the TXT file with Y-axis Data',handles.defaultpath);
        if exist('filepath','var') && ischar(filepath)
            handles.defaultpath = filepath;
        end  
        handles.settings.datafiley = [filepath,filename];
        guidata(gcbo, handles);
    end

    function selectTestDataX(~,~,~)
        handles = guidata(gcbo);
        [filename,filepath] = uigetfile('*.txt','Select the TXT file with X-axis Test Data',handles.defaultpath);
        if exist('filepath','var') && ischar(filepath)
            handles.defaultpath = filepath;
        end  
        handles.settings.testdatafilex = [filepath,filename];
        guidata(gcbo, handles);
    end

    function selectTestDataY(~,~,~)
        handles = guidata(gcbo);
        [filename,filepath] = uigetfile('*.txt','Select the TXT file with Y-axis Test Data',handles.defaultpath);
        if exist('filepath','var') && ischar(filepath)
            handles.defaultpath = filepath;
        end  
        handles.settings.testdatafiley = [filepath,filename];
        guidata(gcbo, handles);  
    end

    function showTestData(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.buttonSelectTestDataCheck, 'Value');
        if value == 1
          set(handles.buttonSelectTestDataX, 'visible', 'on');
          set(handles.buttonSelectTestDataY, 'visible', 'on');
        else
          set(handles.buttonSelectTestDataX, 'visible', 'off');
          set(handles.buttonSelectTestDataY, 'visible', 'off');
        end
        handles.settings.usetestdata = value;
        guidata(gcbo, handles); 
    end

    function getGenerationNumber(hObject,~,~)
        handles = guidata(gcbo);
        gennumber = get(hObject,'String');
        gennumber = str2num(gennumber);
        handles.gnumber = gennumber;
        guidata(gcbo, handles); 
    end

    function getPopulationSize(hObject,~,~)
        handles = guidata(gcbo);
        popsize = get(hObject,'String');
        popsize = str2num(popsize);
        handles.popsize = popsize;
        guidata(gcbo, handles); 
    end

    function selectRGOplot(hObject,~,~)
        handles = guidata(gcbo);
        index_selected = get(hObject,'Value');
        handles.settings.graphics = handles.runtimeplots(index_selected);
        guidata(gcbo, handles); 
    end

    function plotAccuracyComplexity(~,~,~)
        handles = guidata(gcbo);
        accuracy_complexity(handles.results.vars,[],0,[]);
        guidata(gcbo,handles)
    end

    function plotPareto(~,~,~)
        handles = guidata(gcbo);
        figure
        plotpareto(handles.results.vars);        
        guidata(gcbo,handles)      
    end

    function plotDesiredObtained(~,~,~)
        handles = guidata(gcbo);
        result_size = size(handles.results.vars.data.result);
        
        if (result_size(2) ~= 1)
        variable_figure = figure('MenuBar','none',...
               'Toolbar','none',...
               'Position', [1.75*xpos ypos*.50 guisize(1)/2 guisize(2)/6],...
               'Name','Input Variable Selection',...
               'NumberTitle','off',...
               'Visible','on');
        variable_handle = guihandles(variable_figure);         
        variable_handle.variableMessage = uicontrol('units', 'normalized',...        
             'style', 'Text',...
             'HorizontalAlignment','left',...
             'BackgroundColor',[0.8 0.8 0.8],...
             'ForegroundColor',[0 0 0],...
             'Position',[0.05 0.35 0.90 0.25],...
             'FontSize', 10,...
             'String','Enter input variable to plot'); 
	    variable_handle.variableInput = uicontrol('units', 'normalized',...        
             'style', 'edit',...
             'HorizontalAlignment','left',...
             'string', [],...
             'Position',[0.45 0.25 0.25 0.45]);  
        variable_handle.value = 1;
        variable_handle.plotDO = uicontrol('style', 'pushbutton',...
              'units','normalized',...
              'position', [0.75 0.25 0.20 0.45], ...
              'string', 'Plot'); 
          
        set(variable_handle.variableInput,'callback',{@setVariableInput, variable_handle});
        set(variable_handle.plotDO,'callback',{@plotNewDO, variable_handle})
        
        guidata(variable_figure,variable_handle); 
        else
            desired_obtained(handles.results.vars,[],1,0,[]);
        end
        guidata(gcbo,handles)                
    end

    function plotOperatorEvolution(~,~,~)
        handles = guidata(gcbo);
        operator_evolution(handles.results.vars,[],[],1,[]);         
        guidata(gcbo,handles)          
    end

    function plotTreeVisualization(~,~,~)
        handles = guidata(gcbo);
        drawtree(handles.results.best.tree);         
        guidata(gcbo,handles)                             
    end

    function switchSettingsPanel1(~,~,~)
        handles = guidata(gcbo);
        set(obj_handle.TreePanel,'visible','on');
        set(obj_handle.FunctionsTerminalsPanel,'visible','off');
        set(obj_handle.GeneticOperatorsPanel,'visible','off'); 
        set(obj_handle.ReproductionPanel,'visible','off');   
        set(obj_handle.MeasurementsPanel,'visible','off');
        set(obj_handle.SurvivalPanel,'visible','off');  
        %set(obj_handle.LimitedResourcesPopulationPanel,'visible','off'); 
        set(obj_handle.OperationalSettingsPanel,'visible','off');
        set(obj_handle.BloatControlPanel,'visible','off'); 
        guidata(gcbo, handles); 
    end
    
    function switchSettingsPanel2(~,~,~)
        handles = guidata(gcbo);
        set(obj_handle.TreePanel,'visible','off');  
        set(obj_handle.FunctionsTerminalsPanel,'visible','on'); 
        set(obj_handle.GeneticOperatorsPanel,'visible','off'); 
        set(obj_handle.ReproductionPanel,'visible','off');  
        set(obj_handle.MeasurementsPanel,'visible','off');
        set(obj_handle.SurvivalPanel,'visible','off');  
        %set(obj_handle.LimitedResourcesPopulationPanel,'visible','off'); 
        set(obj_handle.OperationalSettingsPanel,'visible','off');
        set(obj_handle.BloatControlPanel,'visible','off'); 
        guidata(gcbo, handles); 
    end

    function switchSettingsPanel3(~,~,~)
        handles = guidata(gcbo);
        set(obj_handle.TreePanel,'visible','off'); 
        set(obj_handle.FunctionsTerminalsPanel,'visible','off');  
        set(obj_handle.GeneticOperatorsPanel,'visible','on'); 
        set(obj_handle.ReproductionPanel,'visible','off'); 
        set(obj_handle.MeasurementsPanel,'visible','off');
        set(obj_handle.SurvivalPanel,'visible','off');
        %set(obj_handle.LimitedResourcesPopulationPanel,'visible','off'); 
        set(obj_handle.OperationalSettingsPanel,'visible','off');
        set(obj_handle.BloatControlPanel,'visible','off'); 
        guidata(gcbo, handles); 
    end

    function switchSettingsPanel4(~,~,~)
        handles = guidata(gcbo);
        set(obj_handle.TreePanel,'visible','off'); 
        set(obj_handle.FunctionsTerminalsPanel,'visible','off');  
        set(obj_handle.GeneticOperatorsPanel,'visible','off'); 
        set(obj_handle.ReproductionPanel,'visible','on');
        set(obj_handle.MeasurementsPanel,'visible','off'); 
        set(obj_handle.SurvivalPanel,'visible','off');   
        %set(obj_handle.LimitedResourcesPopulationPanel,'visible','off');  
        set(obj_handle.OperationalSettingsPanel,'visible','off');
        set(obj_handle.BloatControlPanel,'visible','off'); 
        guidata(gcbo, handles); 
    end

    function switchSettingsPanel5(~,~,~)
        handles = guidata(gcbo);
        set(obj_handle.TreePanel,'visible','off'); 
        set(obj_handle.FunctionsTerminalsPanel,'visible','off');  
        set(obj_handle.GeneticOperatorsPanel,'visible','off'); 
        set(obj_handle.ReproductionPanel,'visible','off');    
        set(obj_handle.MeasurementsPanel,'visible','on');  
        set(obj_handle.SurvivalPanel,'visible','off');  
        %set(obj_handle.LimitedResourcesPopulationPanel,'visible','off'); 
        set(obj_handle.OperationalSettingsPanel,'visible','off');
        set(obj_handle.BloatControlPanel,'visible','off'); 
        guidata(gcbo, handles); 
    end

    function switchSettingsPanel6(~,~,~)
        handles = guidata(gcbo);
        set(obj_handle.TreePanel,'visible','off'); 
        set(obj_handle.FunctionsTerminalsPanel,'visible','off');  
        set(obj_handle.GeneticOperatorsPanel,'visible','off'); 
        set(obj_handle.ReproductionPanel,'visible','off');    
        set(obj_handle.MeasurementsPanel,'visible','off'); 
        set(obj_handle.SurvivalPanel,'visible','on'); 
        %set(obj_handle.LimitedResourcesPopulationPanel,'visible','off'); 
        set(obj_handle.OperationalSettingsPanel,'visible','off');  
        set(obj_handle.BloatControlPanel,'visible','off'); 
        guidata(gcbo, handles); 
    end

    function switchSettingsPanel7(~,~,~)
        handles = guidata(gcbo);
        set(obj_handle.TreePanel,'visible','off'); 
        set(obj_handle.FunctionsTerminalsPanel,'visible','off');  
        set(obj_handle.GeneticOperatorsPanel,'visible','off'); 
        set(obj_handle.ReproductionPanel,'visible','off');    
        set(obj_handle.MeasurementsPanel,'visible','off'); 
        set(obj_handle.SurvivalPanel,'visible','off');  
        %set(obj_handle.LimitedResourcesPopulationPanel,'visible','on');    
        set(obj_handle.OperationalSettingsPanel,'visible','off'); 
        set(obj_handle.BloatControlPanel,'visible','off'); 
        guidata(gcbo, handles); 
    end

    function switchSettingsPanel8(~,~,~)
        handles = guidata(gcbo);
        set(obj_handle.TreePanel,'visible','off'); 
        set(obj_handle.FunctionsTerminalsPanel,'visible','off');  
        set(obj_handle.GeneticOperatorsPanel,'visible','off'); 
        set(obj_handle.ReproductionPanel,'visible','off');    
        set(obj_handle.MeasurementsPanel,'visible','off'); 
        set(obj_handle.SurvivalPanel,'visible','off');  
        %set(obj_handle.LimitedResourcesPopulationPanel,'visible','off');  
        set(obj_handle.OperationalSettingsPanel,'visible','on');  
        set(obj_handle.BloatControlPanel,'visible','off'); 
        guidata(gcbo, handles); 
    end

    function switchSettingsPanel9(~,~,~)
        handles = guidata(gcbo);
        set(obj_handle.TreePanel,'visible','off'); 
        set(obj_handle.FunctionsTerminalsPanel,'visible','off');  
        set(obj_handle.GeneticOperatorsPanel,'visible','off'); 
        set(obj_handle.ReproductionPanel,'visible','off');    
        set(obj_handle.MeasurementsPanel,'visible','off'); 
        set(obj_handle.SurvivalPanel,'visible','off');  
        %set(obj_handle.LimitedResourcesPopulationPanel,'visible','off');  
        set(obj_handle.OperationalSettingsPanel,'visible','off'); 
        set(obj_handle.BloatControlPanel,'visible','on'); 
        guidata(gcbo, handles); 
    end

    function setDepthNodes(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.DepthNodes, 'Value');
        handles.settings.depthnodes = num2str(value);
        if value == 1
            set(handles.InitMaxDepthSize,'String',6);
            set(handles.valueStrictDepthLimit,'String', 17);
            set(handles.valueDynamicMTD,'String', 6);
        elseif value == 2
            set(handles.InitMaxDepthSize,'String',28);
            set(handles.valueStrictDepthLimit,'String', 512);
            set(handles.valueDynamicMTD,'String', 28);
        end
               
        guidata(gcbo, handles); 
    end

    function setInitMaxDepthSize(hObject,~,~)
        handles = guidata(gcbo);
        inicmaxlevel  = get(hObject,'String');
        inicmaxlevel  = str2num(inicmaxlevel);
        handles.settings.inicmaxlevel = inicmaxlevel;
        guidata(gcbo, handles);
    end

    function setGenerativeMethod(~,~,~)
        handles = guidata(gcbo);
        switch get(handles.GenerativeMethod, 'Value');
            case 1
                handles.settings.initpoptype = 'fullinit';                
            case 2
                handles.settings.initpoptype = 'growinit';
            case 3                
                handles.settings.initpoptype = 'rampedinit';
        end
        guidata(gcbo, handles); 
    end

    function setStricDepthLimit(~,~,~)
        handles = guidata(gcbo);
        value = get(obj_handle.strictDepthLimit, 'Value');
        handles.settings.fixedlevel = value;     
        guidata(gcbo, handles); 
    end

    function getStricDepthLimitValue(hObject,~,~)
        handles = guidata(gcbo);
        realmaxlevel  = get(hObject,'String');
        realmaxlevel  = str2num(realmaxlevel);
        handles.settings.realmaxlevel = realmaxlevel; 
        guidata(gcbo, handles);
    end

    function setDynamicMTD(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.dynamicMTD, 'Value');
        if value == 1;
            handles.settings.dynamiclevel = value;
            set(handles.standardDMTD,'ForegroundColor', [0 0 0],'Value',1);
            set(handles.heavyDMTD,'ForegroundColor', [0 0 0],'Value',0)
            set(handles.veryheavyDMTD,'ForegroundColor', [0 0 0],'Value',0)            
        elseif value == 0;
            handles.settings.dynamiclevel = value;
            set(handles.standardDMTD,'ForegroundColor', [0.45 0.45 0.45],'Value',0);
            set(handles.heavyDMTD,'ForegroundColor', [0.45 0.45 0.45],'Value',0)
            set(handles.veryheavyDMTD,'ForegroundColor', [0.45 0.45 0.45],'Value',0)
        guidata(gcbo, handles);   
        end
    end

    function setDMTDstandard(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.standardDMTD,'Value');
        if value == 1
            set(handles.heavyDMTD,'Value',0);
            set(obj_handle.veryheavyDMTD,'visible','off');
            handles.settings.dynamiclevel = value;
        elseif value == 0
            set(handles.standardDMTD,'Value',0);
        end
        guidata(gcbo, handles);        
    end

    function setDMTDheavy(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.heavyDMTD,'Value');
        if value == 1
            set(handles.standardDMTD,'Value',0);
            set(obj_handle.veryheavyDMTD,'visible','on');
            handles.settings.dynamiclevel = 2;         
        elseif value == 0
            set(handles.heavyDMTD,'Value',0);
            set(obj_handle.veryheavyDMTD,'visible','off');
        end
        guidata(gcbo, handles);        
    end

    function getDynamicMTDValue(hObject,~,~)
        handles = guidata(gcbo);
        inicdynlevel  = get(hObject,'String');
        inicdynlevel  = str2num(inicdynlevel);
        handles.settings.inicdynlevel = inicdynlevel;
        guidata(gcbo, handles);
    end

    function setDMTDveryheavy(~,~,~)
        handles = guidata(gcbo);
        value = get(obj_handle.veryheavyDMTD, 'Value');
        handles.settings.veryheavy = value;
        guidata(gcbo, handles);         
    end

    function getFnSelection(~,~,~)
        handles = guidata(gcbo);
 
        handles.tempdata = get(handles.displayAvailableFunctions,'Value');
        selectedFunctions = {};
        availFn = getAvailableFunctions(handles.fnList,handles.actFnList(:,1));
        for i = 1:length(handles.tempdata)
            selectedFunctions(i,:) = availFn(handles.tempdata(i),:);
        end
        handles.selectedFunctions = selectedFunctions;

        guidata(gcbo, handles); 
    end

    function addFn(~,~,~)
        handles = guidata(gcbo);
        try
            m = length(handles.selectedFunctions(:,1));
            n = length(handles.actFnList);
            i = 1;
            while i <= m
                if (~ismember(handles.selectedFunctions(i,1), handles.actFnList(:,1)))
                    handles.actFnList(n+i,:) = handles.selectedFunctions(i,:);
                end
                i = i + 1;
            end
            
            set(handles.displayActiveFunctions,'String',handles.actFnList(:,1));
            [~, availFnList] = getAvailableFunctions(handles.fnList, handles.actFnList(:,1));
            set(handles.displayAvailableFunctions,'String',availFnList,'Value', []);
        catch
            msgbox('Please select available function(s) to add');
        end
        guidata(gcbo, handles); 
    end

    function getActFnSelection(~,~,~)
        handles = guidata(gcbo);
 
        handles.tempdata = get(handles.displayActiveFunctions,'Value');
        selectedFunctions = {};
        availFn = getActiveFunctions(handles);
        for i = 1:length(handles.tempdata)
            selectedFunctions(i,:) = availFn(handles.tempdata(i),:);
        end
        handles.selectedFunctions = selectedFunctions;

        guidata(gcbo, handles); 
    end

    function removeFn(~,~,~)
        handles = guidata(gcbo);
        try
            m = length(handles.selectedFunctions(:,1));
            n = length(handles.actFnList);
            i = 1;
            while i <= m
                if (ismember(handles.selectedFunctions(i,1), handles.actFnList(:,1)))
                    removepos = strmatch(handles.selectedFunctions(i,1),handles.actFnList(:,1));
                    handles.actFnList(removepos,:) = [];
                end
                i = i + 1;
            end
            
            set(handles.displayActiveFunctions,'String',handles.actFnList(:,1),'Value',[]);
            [~, availFnList] = getAvailableFunctions(handles.fnList, handles.actFnList(:,1));
            set(handles.displayAvailableFunctions,'String',availFnList,'Value', []);
        catch
            msgbox('Please select active function(s) to remove');
        end
        guidata(gcbo, handles); 
    end

    function getTerminals(hObject,~,~)
        handles = guidata(gcbo);       
        stringTerminals = get(hObject,'String');        
        stringTerminals = strsplit(stringTerminals,',');
        stringTerminals = strtrim(stringTerminals);        
        handles.settings = setterminals(handles.settings,stringTerminals{:});
        guidata(gcbo, handles);
    end

    function setAutoVars(~,~,~)
        handles = guidata(gcbo);
        autovars = get(handles.autoVars,'Value');   
        handles.settings.autovars = autovars - 1;
        guidata(gcbo, handles);        
    end

    function setNumVars(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.numVars,'String');
        numvars = str2num(value);
        if ~isempty(numvars) && (numvars >= 0 && ceil(numvars) == floor(numvars))
            handles.settings.numvars = numvars;
        elseif isempty(numvars)
            handles.settings.numvars = [];
        else
            msgbox('Please insert the number of variables necessary to evaluate fitness cases (integer equal or greater than zero).')
        end        
        guidata(gcbo, handles);        
    end

    function getReproductionParameter(hObject,~,~)
        handles = guidata(gcbo);
        reproduction  = get(hObject,'String');
        reproduction = strrep(reproduction,',','.');
        reproduction = str2num(reproduction);
        if ~(reproduction < 0 || reproduction > 1) 
            handles.settings.reproduction = reproduction; 
        else
            msgbox('Please insert a value between 0 and 1.')
        end
        guidata(gcbo, handles); 
    end

    function selectOperator(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.displayGeneticOperators, 'Value');
        oper = obj_handle.operatorslist;
        args = {};
        for n = 1:length(value)
            args{end + 1} = oper{3*value(n)-2};
            args{end + 1} = oper{3*value(n)-1};
            args{end + 1} = oper{3*value(n)};
            if strcmp(oper{3*value(n)-2},'brood')
                set(handles.textBroodSize,'ForegroundColor',[0 0 0])
                set(handles.broodSize,'ForegroundColor',[0 0 0])
            elseif strcmp(oper{3*value(n)-2},'pointmutation')
                set(handles.textPointMutation,'ForegroundColor',[0 0 0])
                set(handles.onePointMutation,'ForegroundColor',[0 0 0],'Value',1)
                set(handles.nPointMutation,'ForegroundColor',[0 0 0])
            else
                set(handles.textBroodSize,'ForegroundColor',[0.45 0.45 0.45])
                set(handles.broodSize,'ForegroundColor',[0.45 0.45 0.45])
                set(handles.textPointMutation,'ForegroundColor',[0.45 0.45 0.45])
                set(handles.onePointMutation,'ForegroundColor',[0.45 0.45 0.45],'Value',0)
                set(handles.nPointMutation,'ForegroundColor',[0.45 0.45 0.45])
            end
        end        
        handles.settings = setoperators(handles.settings,args{:}); 
        guidata(gcbo, handles); 
    end

    function setOnePointMutation(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.onePointMutation,'Value');
        if value == 1
            set(handles.nPointMutation,'Value',0);
            handles.settings.pointmutationtype = '1point';
        elseif value == 0
            set(handles.nPointMutation,'Value',1);
            handles.settings.pointmutationtype = 'npoint';
        end  
        guidata(gcbo, handles); 
    end

    function setNPointMutation(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.nPointMutation,'Value');
        if value == 1
            set(handles.onePointMutation,'Value',0);
            handles.settings.pointmutationtype = 'npoint';
        elseif value == 0
            set(handles.onePointMutation,'Value',1);
            handles.settings.pointmutationtype = '1point';
        end      
        guidata(gcbo, handles); 
    end

    function setBroodSize(hObject,~,~)
        handles = guidata(gcbo);
        broodsize  = get(hObject,'String');
        broodsize = strrep(broodsize,',','.');
        broodsize = str2num(broodsize);
        if (~mod(broodsize,2) && broodsize > 0) 
            handles.settings.broodpairs = broodsize/2; 
        else
            msgbox('The brood size should be an even positive integer.')
        end     
        guidata(gcbo, handles); 
    end

    function setAGO(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.operatorProbabilities, 'Value');
        if value == 1
            handles.settings.operatorprobstype = 'variable';
            handles.settings.initialprobstype = 'variable';
            set(handles.textAdaptWindowSize,'ForegroundColor', [0 0 0]);
            set(handles.textNumBackGen,'ForegroundColor', [0 0 0]);   
            set(handles.textPercentBack,'ForegroundColor', [0 0 0]); 
            set(handles.textAdaptInterval,'ForegroundColor', [0 0 0]); 
            set(handles.textPercentChange,'ForegroundColor', [0 0 0]); 
            set(handles.textMinProb,'ForegroundColor', [0 0 0]);                                                 
            set(handles.adaptWindowSize,'ForegroundColor', [0 0 0],'String',[]);
            set(handles.numBackGen,'ForegroundColor', [0 0 0],'String','3')
            set(handles.percentBack,'ForegroundColor', [0 0 0],'String','0.25')   
            set(handles.adaptInterval,'ForegroundColor', [0 0 0],'String',[]) 
            set(handles.percentChange,'ForegroundColor', [0 0 0],'String','0.25') 
            set(handles.minProb,'ForegroundColor', [0 0 0],'String','0.1') 
            set(handles.textSmallDifference,'ForegroundColor', [0 0 0])
        elseif value == 0;
            handles.settings.dynamiclevel = value;
            handles.settings.operatorprobstype = 'fixed';
            handles.settings.initialprobstype = 'fixed';
            set(handles.textAdaptWindowSize,'ForegroundColor', [0.45 0.45 0.45]);
            set(handles.textNumBackGen,'ForegroundColor', [0.45 0.45 0.45]);   
            set(handles.textPercentBack,'ForegroundColor', [0.45 0.45 0.45]); 
            set(handles.textAdaptInterval,'ForegroundColor', [0.45 0.45 0.45]); 
            set(handles.textPercentChange,'ForegroundColor', [0.45 0.45 0.45]); 
            set(handles.textMinProb,'ForegroundColor', [0.45 0.45 0.45]);              
            set(handles.adaptWindowSize,'ForegroundColor', [0.45 0.45 0.45],'String',[]);
            set(handles.numBackGen,'ForegroundColor', [0.45 0.45 0.45],'String',[])
            set(handles.percentBack,'ForegroundColor', [0.45 0.45 0.45],'String',[])
            set(handles.adaptInterval,'ForegroundColor', [0.45 0.45 0.45],'String',[]) 
            set(handles.percentChange,'ForegroundColor', [0.45 0.45 0.45],'String',[]) 
            set(handles.minProb,'ForegroundColor', [0.45 0.45 0.45],'String',[])   
            set(handles.textSmallDifference,'ForegroundColor', [0.45 0.45 0.45])
        end
        guidata(gcbo, handles); 
    end

    function setAdaptWindowSize(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.adaptWindowSize,'String');
        adaptwindowsize = str2num(value);
        if (adaptwindowsize > 0 && (ceil(adaptwindowsize) == floor(adaptwindowsize)))
            handles.settings.adaptwindowsize = adaptwindowsize;
        else
            msgbox('Please insert an integer value greater than 0.')
        end
        guidata(gcbo, handles);          
    end

    function setNumBackGen(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.numBackGen,'String');
        numbackgen = str2num(value);
        if (numbackgen > 0 && (ceil(numbackgen) == floor(numbackgen)))
            handles.settings.numbackgen = numbackgen;
        else
            msgbox('Please insert an integer value greater than 0.')
        end
        guidata(gcbo, handles);        
    end

    function setPercentBack(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.percentBack,'String');
        percentback = str2num(value);
        if (percentback >= 0 && percentback <= 1)
            handles.settings.percentback = percentback;
        else
            msgbox('Please insert a value between 0 and 1.')
        end
        guidata(gcbo, handles);         
    end

    function setAdaptInterval(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.adaptInterval,'String');
        adaptinterval = str2num(value);
        if (adaptinterval > 0)
            handles.settings.adaptinterval = adaptinterval;
        else
            msgbox('Please insert a value greater than 0.')
        end
        guidata(gcbo, handles);          
    end

    function setPercentChange(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.percentChange,'String');
        percentchange = str2num(value);
        if (percentchange >= 0 && percentchange <= 1)
            handles.settings.percentchange = percentchange;
        else
            msgbox('Please insert a value between 0 and 1.')
        end       
        guidata(gcbo, handles);         
    end

    function setMinProb(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.minProb,'String');
        minprob = str2num(value);
        if (minprob >= 0 && minprob <= 1)
            handles.settings.minprob = minprob;
        else
            msgbox('Please insert a value between 0 and 1.')
        end      
        guidata(gcbo, handles);        
    end

    function setInitialProbs(hObject,~,~)
        handles = guidata(gcbo);
        initprobs = get(hObject,'String');        
        initprobs = strtrim(strsplit(initprobs,','));
        for n = 1:length(initprobs)
            initprobs{n} = str2num(initprobs{n});
        end
        initprobs = cell2mat(initprobs);
        
        if (length(initprobs) == length(handles.settings.operatornames))
            initialprobstype = handles.settings.initialprobstype;
            if (strcmp(initialprobstype,'fixed'))
                handles.settings.initialfixedprobs = initprobs;
            elseif (strcmp(initialprobstype,'variable'))
                handles.settings.initialvarprobs = initprobs;
            end
        else
            msgbox('Please define as many initial probabilites as selected operators.')
        end
        

        guidata(gcbo, handles); 
    end

    function setSmallDifference(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.smallDifference,'String');
        smalldifference = str2num(value);
        if (smalldifference > 0 && smalldifference <= 1)
            handles.settings.smalldifference = smalldifference;
        else
            msgbox('Please insert a value between 0 and 1.')
        end      
        guidata(gcbo, handles);         
    end

    function setSamplingMethod(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.samplingMethod, 'Value');
        handles.settings.sampling = handles.samplingMethods{value};
        guidata(gcbo, handles);
    end

    function setTournamentSize(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.tournamentSize,'String');
        tournamentsize = strrep(value,',','.');
        tournamentsize = str2num(tournamentsize);
        if ~(tournamentsize < 0 || (tournamentsize > 1 && ~(ceil(tournamentsize) == floor(tournamentsize))))
            handles.settings.tournamentsize = tournamentsize;
        else
            msgbox('Please insert a value between 0 and 1 or an integer greater than 1.')
        end
        guidata(gcbo, handles);
    end

    function setDrawsPerSpin(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.drawsPerSpin,'String');
        drawperspin = str2num(value);
        if (drawperspin > 0 && (ceil(drawperspin) == floor(drawperspin)))
            handles.settings.drawperspin = drawperspin;
        else
            msgbox('Please insert an integer value greater than 0.')
        end
        guidata(gcbo, handles);
    end

    function setExpectedChildrenMethod(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.expectedChildrenMethod, 'Value');
        handles.settings.expected = handles.expectedChildren{value};
        guidata(gcbo, handles);        
    end

    function setGenerationGap(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.generationGap,'String');
        gengap = strrep(value,',','.');
        gengap = str2num(gengap);
        if ~(gengap < 0 || (gengap > 1 && ~(ceil(gengap) == floor(gengap))))
            handles.settings.gengap = gengap;
        else
            msgbox('Please insert a value between 0 and 1 or an integer greater than 1.')
        end
        guidata(gcbo, handles);        
    end

    function setFitnessMeasuring(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.fitnessMeasuring, 'Value');
        if strcmp(handles.settings.files2data,'xy2inout')
        	handles.settings.calcfitness = handles.fitnessMeasureFunctions{value};
            if value == 1 	
                handles.settings.lowerisbetter = 1;
            end
        elseif strcmp(handles.settings.files2data,'anttrail')
        	handles.settings.calcfitness = handles.fitnessMeasureFunctionsAnts{value};
            if value == 1
                handles.settings.lowerisbetter = 0;
            elseif value == 2
                handles.settings.lowerisbetter = 1;
            end    
        end
        disp(handles.settings)
        guidata(gcbo, handles);  
    end

    function setPrecision(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.precision,'String');
        precision = str2num(value);
        if (precision > 0 && (ceil(precision) == floor(precision)))
            handles.settings.precision = precision;
        else
            msgbox('Please insert an integer value greater than 0.')
        end
        guidata(gcbo, handles);
    end

    function setAdjustedFitnessMeasuring(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.adjustedFitnessMeasuring, 'Value');
        if value ~= 1
            handles.settings.adjustfitness = handles.adjustedFitnessMeasureFunctions{value};
        end
        guidata(gcbo, handles);          
    end

    function setMeasureComplexity(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.selectMeasureComplexity, 'Value');
        handles.settings.calccomplexity = value;
        guidata(gcbo, handles);                 
    end

    function setMeasureDiversity(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.measureDiversity, 'Value');
        if value ~= 1
            handles.settings.calcdiversity = {handles.measureDiversityMethods{value}};
            set(handles.SelectRGO,'String',{'Fitness','Diversity','Complexity','Operators'});
        else
            handles.settings.calcdiversity = {};
            set(handles.SelectRGO,'String',{'Fitness','<html><body style="color:#9b9b9b;">Diversity','Complexity','Operators'});
        end
        
        guidata(gcbo, handles);          
    end

    function setKeepEvalSize(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.keepEvalSize,'String');
        keepevalssize = str2num(value);
        if (keepevalssize > 0 && (ceil(keepevalssize) == floor(keepevalssize)))
            handles.settings.keepevalssize = keepevalssize;
        else
            msgbox('Please insert an integer value greater than 0.')
        end
        guidata(gcbo, handles);              
    end

    function setElitism(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.elitism, 'Value');
        handles.settings.elitism = handles.elitismList{value};
        guidata(gcbo, handles);        
    end

    function setSurvivalFn(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.survivalFn, 'Value');
        handles.settings.survival = handles.survivalFnList{value};
        guidata(gcbo, handles);           
    end

    function setMaxResources(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.maxResources,'String');
        maxresources = str2num(value);
        if (maxresources > 0 && (ceil(maxresources) == floor(maxresources)))
            handles.settings.maxresources = maxresources;
        else
            msgbox('Please insert an integer value greater than 0.')
        end
        guidata(gcbo, handles);         
    end

    function setDynamicResourcesFn(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.dynamicResourcesFn, 'Value');
        handles.settings.dynamicresources = value - 1;
        guidata(gcbo, handles);         
    end

    function setResourcesPopSize(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.resourcesPopSize, 'Value');
        handles.settings.resourcespopsize = handles.resourcesPopSizeList{value};
        guidata(gcbo, handles);         
    end

    function setResourcesFitness(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.resourcesFitness, 'Value');
        handles.settings.resourcesfitness = handles.resourcesFitnessList{value};
        guidata(gcbo, handles);         
    end

    function setPeriodeParameter(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.periodeParameter,'String');
        periode = str2num(value);
        if (periode > 0 && (ceil(periode) == floor(periode)))
            handles.settings.periode = periode;
        else
            msgbox('Please insert an integer value greater than 0.')
        end
        guidata(gcbo, handles);          
    end

    function setAjoutParameter(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.ajoutParameter, 'Value');
        if value == 1
            handles.settings.ajout = 'M1';
        elseif value == 2
            handles.settings.ajout = 'M2';
        end
        guidata(gcbo, handles);        
    end

    function setPercentageStop(~,~,~)        
        handles = guidata(gcbo);
        value = get(handles.percentageStop,'String');
        hit1 = strtrim(strsplit(value,','));
        mnew = length(hit1);
        mold = length(handles.settings.hits(:,1));
        if mnew >= mold
            hitmatrix = zeros(mnew,2);
            hitmatrix(1:mold,:) = handles.settings.hits;
        elseif mnew < mold
            hitmatrix = zeros(mnew,2);
            hitmatrix(1:mnew,:) = handles.settings.hits(1:mnew,:);
            hitmatrix(mnew+1:end,:) = [];
        end
        for i = 1:mnew
            hit1{i} = str2num(hit1{i});
             if ~(hit1{i} >= 0 && hit1{i} <=100)
                msgbox('Please insert a comma-separated list of percentages from 0 to 100%.')
            end
        end
        hitmatrix(:,1) = cell2mat(hit1).';  
        handles.settings.hits = hitmatrix;
        guidata(gcbo, handles);         
    end

    function setStopCondition(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.stopCondition,'String');
        hit2 = strtrim(strsplit(value,','));        
        mnew = length(hit2);
        mold = length(handles.settings.hits(:,2));
        if mnew >= mold
            hitmatrix = zeros(mnew,2);
            hitmatrix(1:mold,:) = handles.settings.hits;
        elseif mnew < mold
            hitmatrix = zeros(mnew,2);
            hitmatrix(1:mnew,:) = handles.settings.hits(1:mnew,:);
            hitmatrix(mnew+1:end,:) = [];
        end
        for i = 1:mnew
            hit2{i} = str2num(hit2{i});
             if ~(hit2{i} >= 0 && hit2{i} <=100)
                msgbox('Please insert a comma-separated list of percentages from 0 to 100%.')
            end
        end
        hitmatrix(:,2) = cell2mat(hit2).';  
        handles.settings.hits = hitmatrix;
        guidata(gcbo, handles);        
    end

    function setSaveToFile(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.saveToFile, 'Value');
        handles.settings.savetofile = handles.savetofilelist{value}; 
        if ~strcmp(handles.settings.savetofile,'never')
            pathname = uigetdir;
            handles.settings.savedir = pathname;
            set(handles.textSaveName,'ForegroundColor',[0 0 0])
        else
            set(handles.textSaveName,'ForegroundColor',[0.45 0.45 0.45])
        end
        guidata(gcbo, handles); 
    end

    function setSaveName(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.saveName, 'String');
        handles.settings.savename = value;       
        guidata(gcbo, handles);
    end

    function setOutput(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.output, 'Value');
        handles.settings.output = handles.outputlist{value}; 
        guidata(gcbo, handles);        
    end


    function setOperatorEqualisation(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.operatorEqualisation, 'Value');
        handles.settings.opeq = value;
        if value
            set(handles.textOpeqType,'ForegroundColor',[0 0 0]);
            set(handles.opeqType,'ForegroundColor',[0 0 0]);
            set(handles.textBinSize,'ForegroundColor',[0 0 0]);
            set(handles.binSize,'ForegroundColor',[0 0 0]);
            set(handles.textOpeqTarget,'ForegroundColor',[0 0 0])
            set(handles.opeqTarget,'ForegroundColor',[0 0 0])
        else
            set(handles.textOpeqType,'ForegroundColor',[0.45 0.45 0.45]);
            set(handles.opeqType,'ForegroundColor',[0.45 0.45 0.45]);
            set(handles.textBinSize,'ForegroundColor',[0.45 0.45 0.45]);
            set(handles.binSize,'ForegroundColor',[0.45 0.45 0.45]);
            set(handles.textOpeqTarget,'ForegroundColor',[0.45 0.45 0.45])
            set(handles.opeqTarget,'ForegroundColor',[0.45 0.45 0.45])            
        end
        guidata(gcbo, handles); 
    end

    function setOpeqMethod(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.opeqType, 'Value');
        handles.settings.opeqtype = handles.operatoreqlist{value}; 
        guidata(gcbo, handles); 
    end

    function setBinSize(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.binSize,'String');
        binsize = str2num(value);
        if binsize > 0 && (ceil(binsize) == floor(binsize))
            handles.settings.opeq_binsize = binsize;
        else
            msgbox('Please insert an integer greater than zero.')
        end 
        guidata(gcbo, handles); 
    end

    function setOpeqTarget(~,~,~)
        handles = guidata(gcbo);
        value = get(handles.opeqTarget, 'Value');
        if value ~= 1
            handles.settings.opeq_target = {handles.operatoreqTargetlist{value}};
        else
            handles.settings.opeq_target = [];
        end
        
        guidata(gcbo, handles); 
    end


     % Functions for Plotting Desired versus Obtained
    function setVariableInput(~,~,~)
        temp_handles = guidata(gcbo);
        value = get(temp_handles.variableInput,'String');
        variable = str2num(value);
        if (variable >= 1 && ceil(variable) == floor(variable))
            temp_handles.value = variable;
        else
            msgbox('Please insert the input variable to plot (integer equal or greater than 1).')
        end        
        guidata(gcbo, temp_handles); 
    end

    function plotNewDO(~,~,~)
        temp_handles = guidata(gcbo);
        gui_figure = findobj('Name','GPLAB Graphical User Interface');
        gui_handles = guidata(gui_figure);
        try
            desired_obtained(gui_handles.results.vars,[],temp_handles.value,0,[]);
        catch
            msgbox('The input variable selected is not available.')
        end
    end

end

%% AUXILIARY FUNCTIONS

function [actFn, actFnList] = getActiveFunctions(handles)
    actFn = handles.actFnList;
    actFnList = handles.actFnList(:,1);
end

function [availFn, availFnList] = getAvailableFunctions(fullList, actList)

   availFnList = {};
   for n = 1:length(fullList)
       if ~ismember(fullList{n},actList)
           availFnList{end+1,1} = fullList{n,1};
           availFnList{end,2} = fullList{n,2};           
       end
   end
   
   availFn = availFnList;
   availFnList = availFnList(:,1);  

end

